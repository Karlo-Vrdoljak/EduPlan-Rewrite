{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/uuid/lib/bytesToUuid.js","webpack:///./node_modules/uuid/lib/rng.js","webpack:///./node_modules/uuid/v4.js","webpack:///./src/EduPlanServer.js","webpack:///./src/api.js","webpack:///./src/appConfig.js","webpack:///./src/db.js","webpack:///./src/login.js","webpack:///./src/removeAccent.js","webpack:///./src/tools.js","webpack:///external \"base-64\"","webpack:///external \"body-parser\"","webpack:///external \"crypto\"","webpack:///external \"express\"","webpack:///external \"fs\"","webpack:///external \"fs-extra\"","webpack:///external \"moment\"","webpack:///external \"multer\"","webpack:///external \"request\"","webpack:///external \"tedious\"","webpack:///external \"tedious-connection-pool\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","byteToHex","toString","substr","buf","offset","bth","join","crypto","randomBytes","rng","bytesToUuid","options","Array","rnds","random","ii","bodyParser","appConfig","app","pripremiFoldere","use","req","res","next","header","json","urlencoded","extended","appVerzija","query","appVersion","method","originalUrl","substring","checkAuthHeader","headers","korisnikToken","login","checkIfLoggedIn","status","send","error","length","port","applicationPort","err","Error","console","log","message","end","listen","express","db","TYPES","fs","multer","router","Router","conn","createConnection","request","createRequest","addParameter","Int","PkStudent","execStoredProc","PkUsera","PkNastavnik","NVarChar","DatumOd","DatumDo","PkNastavnikSuradnik","pkUsera","PkSkolskaGodina","PkSkolskaGodinaStudijPredmetKatedra","PkPredmet","PkNastavaPlan","PkNastavaRealizacija","PkPredavaonica","PkSatnica","Datum","post","data","tableParametar","table","body","params","PrisutniStudenti","columns","type","Bit","rows","forEach","e","push","PkEduCardReaderData","ProfesorIskljucioDaNe","PkStudij","TVP","delete","localStorage","setItem","PkPodTipPredavanja","PkSkolskaGodinaStudijGrupaZaNastavu","VarChar","NazivPredmetNastavnaCjelina","KoristiSeDaNe","PkPredmetNastavnaCjelina","put","PkStudentnaVisokomUcilistuPredmet","PkOcjenjivac","PolozenDaNe","OslobodjenPolaganjaDaNe","Ocjena","putanjaFile","upload","storage","diskStorage","destination","file","callback","uploadPath","filename","exists","originalname","uploadedFileName","Date","now","tmpDate","getTime","y","getFullYear","getMonth","mkdir","single","PkKategorijaDokumenta","AkademskaGodina","Opis","VidljivStudentimaDaNe","OznakaDokumenta","JSON","parse","akademskaGodina","this","opis","vidljivoStudentima","oznakaDokumenta","setTimeout","requestDatoteka","encoding","mimetype","path","size","addOutputParameter","execStoredProcFromNodeNoPooler","spResult","outputParams","dbResultObj","requestDokument","conn2","PkDatotekaDokumentPar","PkMaterijaliUNastavi","PkUseraPromjena","filePath","fileName","download","language","includes","setHeader","readFile","PkDokument","PkOsobniDokumentiNS","databaseServer","databaseName","username","password","greska","outputvalue","ConnectionPool","config","server","instanceName","instancename","userName","encrypt","database","pool","min","max","acquireTimeout","Connection","connection","Request","rowCount","close","createRequestPool","release","stream","output","defaultContent","errorHandler","ex","empty","on","write","more","returnStatus","execSql","stringify","parameterName","metadata","temp","callProcedure","execStoredProcFromNode","rowObject","column","colName","execStoredProcNoJSONLocalResults","dbRequest","resultData","resultStatus","uuidv4","base64","logiraniKorisnici","pushLoginToken","currentTime","isAdminDaNe","AdminDaNe","loginToken","korisnikIme","accessDateTime","rezultat","loginStatus","loginResult","loginFunction","ObaveznaIzmjenaLozinkeDaNe","procName","lineNumber","dbLogin","XsatiPrije","logiranBezAktivnosti","filterUserInKorisnici","filter","f","splice","findIndex","korisnikPass","existToken","token","userPassFromHeader","inputHeader","decode","text","password_hash","createHash","update","digest","toUpperCase","iv","Buffer","alloc","cipher","createCipheriv","crypted","final","accentRemover","removeAccents","inputString","str","defaultDiacriticsRemovalMap","base","letters","replace","removeDiacritics","require"],"mappings":"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","file":"EduPlanEx3.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"X:\\\\Documents\\\\GitHub\\\\EduPlan-Rewrite\\\\EduPlan_rewrite\\\\NodeServer\\\\dist\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/EduPlanServer.js\");\n","/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4\n  return ([bth[buf[i++]], bth[buf[i++]], \n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]],\n\tbth[buf[i++]], bth[buf[i++]],\n\tbth[buf[i++]], bth[buf[i++]]]).join('');\n}\n\nmodule.exports = bytesToUuid;\n","// Unique ID creation requires a high quality random # generator.  In node.js\n// this is pretty straight-forward - we use the crypto API.\n\nvar crypto = require('crypto');\n\nmodule.exports = function nodeRNG() {\n  return crypto.randomBytes(16);\n};\n","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options === 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nmodule.exports = v4;\n","var express = require('express'),\r\n    bodyParser = require('body-parser'),\r\n    appConfig = require('./appConfig.js'),\r\n    app = require('express')(),\r\n    tools = require('./tools.js');\r\n\r\ntools.pripremiFoldere();\r\n\r\napp.use(function (req, res, next) {\r\n  res.header(\"Access-Control-Allow-Origin\", \"*\");\r\n  res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept, Authorization\");\r\n  res.header(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, DELETE, OPTIONS\");\r\n  next();\r\n});\r\n\r\napp.use(bodyParser.json());\r\n\r\napp.use(bodyParser.urlencoded({\r\n  extended: true\r\n}));\r\n\r\napp.use(function (req, res, next) {\r\n  if (appConfig.appVerzija === req.query.appVersion) {\r\n    next();\r\n  } else {\r\n    // res.status(505).send({ error: 'Pogrešna verzija!' })\r\n    next();\r\n  }\r\n});\r\n\r\napp.use(function (req, res, next) {\r\n  var userExists = false;\r\n  if (req.method != 'OPTIONS') {\r\n    if (req.originalUrl.substring(5, 14) !== 'userLogin') {\r\n      if (appConfig.checkAuthHeader === true) {\r\n        if (req.headers['authorization']) {\r\n          let korisnikToken = req.headers['authorization'];\r\n          if (login.checkIfLoggedIn(korisnikToken)) {\r\n            next();\r\n          } else {\r\n            res.status(401).send({\r\n              error: 'Neautorizirani pristup!'\r\n            });\r\n          }\r\n        } else if (req.originalUrl.substring(req.originalUrl.length - 3, req.originalUrl.length) === 'rpt' || req.originalUrl.substring(5, 16) === 'LaTosConfig') {\r\n          next();\r\n        } else {\r\n          res.status(401).send({\r\n            error: 'Neautorizirani pristup!'\r\n          });\r\n        }\r\n      } else {\r\n        next();\r\n      }\r\n    } else {\r\n      next();\r\n    }\r\n  } else {\r\n    next();\r\n  }\r\n})\r\n\r\napp.use('/api', require('./api'));\r\nvar port = appConfig.applicationPort;\r\n\r\napp.use(function (req, res, next) {\r\n  var err = new Error('Not Found');\r\n  err.status = 404;\r\n  next(err);\r\n});\r\n\r\napp.use(function (err, req, res, next) {\r\n  console.log('ERROR: ', err.message, err.status);\r\n  res.status(err.status || 500).end();\r\n});\r\n\r\nmodule.exports = app;\r\napp.listen(port);\r\nconsole.log('Server started ' + port);\r\n","var express = require(\"express\"),\r\n    appConfig = require(\"./appConfig.js\"),\r\n    db = require(\"./db.js\"),\r\n    request = require(\"request\"),\r\n    TYPES = require(\"tedious\").TYPES,\r\n    moment = require(\"moment\"),\r\n    login = require(\"./login.js\"),\r\n    accentRemover = require(\"./removeAccent.js\"),\r\n    fs = require(\"fs\"),\r\n    multer = require(\"multer\"),\r\n    router = express.Router();\r\n\r\n// dohvat podataka o studentu\r\nrouter.get(\"/Student\", function (req, res) {\r\n    var conn = db.createConnection();\r\n    var request = db.createRequest(\"PregledKartice.spStudent_Select\", conn);\r\n\r\n    request.addParameter(\"PkStudent\", TYPES.Int, req.query.PkStudent);\r\n\r\n    db.execStoredProc(request, conn, res, \"{}\");\r\n});\r\n\r\n// dohvat podataka o studentu, studiju i predmetima\r\nrouter.get(\"/StudentNaVisokomUcilistuPredmet\", function (req, res) {\r\n    var conn = db.createConnection();\r\n    var request = db.createRequest(\"PregledKartice.spStudentNaVisokomUcilistuPredmet_Select\", conn);\r\n\r\n    request.addParameter(\"PkStudent\", TYPES.Int, req.query.PkStudent);\r\n\r\n    db.execStoredProc(request, conn, res, \"{}\");\r\n});\r\n\r\n// dohvat podataka o studentu, studiju i predmetima\r\nrouter.get(\"/StudentStudij\", function (req, res) {\r\n    var conn = db.createConnection();\r\n    var request = db.createRequest(\"PregledKartice.spStudentStudij_Select\", conn);\r\n\r\n    request.addParameter(\"PkStudent\", TYPES.Int, req.query.PkStudent);\r\n\r\n    db.execStoredProc(request, conn, res, \"{}\");\r\n});\r\n\r\n// dohvat podataka o studentu na svim ak. godinama koje je pohadao\r\nrouter.get(\"/StudentNaAkGodini\", function (req, res) {\r\n    var conn = db.createConnection();\r\n    var request = db.createRequest(\"PregledKartice.spStudentUAkGodini_Select\", conn);\r\n\r\n    request.addParameter(\"PkStudent\", TYPES.Int, req.query.PkStudent);\r\n\r\n    db.execStoredProc(request, conn, res, \"{}\");\r\n});\r\n\r\n// dohvat podataka o obavijestima vezanim za studenta\r\nrouter.get(\"/StudentObavijesti\", function (req, res) {\r\n    var conn = db.createConnection();\r\n    var request = db.createRequest(\"PregledKartice.spStudentObavijesti_Select\", conn);\r\n\r\n    request.addParameter(\"PkUsera\", TYPES.Int, req.query.PkUsera);\r\n\r\n    db.execStoredProc(request, conn, res, \"{}\");\r\n});\r\n\r\n// dohvat podataka o profesoru -> ne vraca nista jer je napravljeno za razvojnu bazu, a ne live (na njemu ne postoji procedura)\r\nrouter.get(\"/Nastavnik\", function (req, res) {\r\n    var conn = db.createConnection();\r\n    var request = db.createRequest(\"PregledKartice.spNastavnik_Select\", conn);\r\n\r\n    request.addParameter(\"PkNastavnik\", TYPES.Int, req.query.PkNastavnik);\r\n\r\n    db.execStoredProc(request, conn, res, \"{}\");\r\n});\r\n\r\n// dohvat podataka o obavijestima vezanim za profesore\r\nrouter.get(\"/ProfesorObavijesti\", function (req, res) {\r\n    var conn = db.createConnection();\r\n    var request = db.createRequest(\"PregledKartice.spStudentObavijesti_Select\", conn); //promjenit na proceduru za profesora\r\n\r\n    request.addParameter(\"PkUsera\", TYPES.Int, req.query.PkUsera);\r\n\r\n    db.execStoredProc(request, conn, res, \"{}\");\r\n});\r\n\r\n// dohvat podataka o ak.godinama\r\nrouter.get(\"/AkademskaGodinaCombo\", function (req, res) {\r\n    var conn = db.createConnection();\r\n    var request = db.createRequest(\"PregledKartice.spAkGodinaComboBoxTemp_Select\", conn);\r\n    db.execStoredProc(request, conn, res, \"{}\");\r\n});\r\n\r\n// dohvat rasporeda studente\r\nrouter.get(\"/PrikazRasporedaStudent\", function (req, res) {\r\n    var conn = db.createConnection();\r\n    var request = db.createRequest(\"PregledKartice.spPrikazDnevnogRasporedaZaStudenta\", conn);\r\n\r\n    request.addParameter(\"DatumOd\", TYPES.NVarChar, req.query.DatumOd);\r\n    request.addParameter(\"DatumDo\", TYPES.NVarChar, req.query.DatumDo);\r\n    request.addParameter(\"PkStudent\", TYPES.Int, req.query.PkStudent);\r\n    // request.addParameter(\"PkSkolskaGodina\", TYPES.Int, req.query.PkSkolskaGodina);\r\n\r\n    db.execStoredProc(request, conn, res, \"{}\");\r\n});\r\n\r\n// dohvat rasporeda studente\r\nrouter.get(\"/PrikazRasporedaProfesor\", function (req, res) {\r\n    var conn = db.createConnection();\r\n    var request = db.createRequest(\r\n        \"PregledKartice.spPrikazDnevnogRasporedaZaNastavnikaSuradnika\",\r\n        conn\r\n    );\r\n\r\n    request.addParameter(\"DatumOd\", TYPES.NVarChar, req.query.DatumOd);\r\n    request.addParameter(\"DatumDo\", TYPES.NVarChar, req.query.DatumDo);\r\n    request.addParameter(\"PkNastavnikSuradnik\", TYPES.Int, req.query.PkNastavnikSuradnik);\r\n    // request.addParameter(\"PkSkolskaGodina\", TYPES.Int, req.query.PkSkolskaGodina);\r\n\r\n    db.execStoredProc(request, conn, res, \"{}\");\r\n});\r\n\r\n//dohvat podataka o logiranom useru\r\nrouter.get(\"/KorisnikPodaci\", function (req, res) {\r\n    var conn = db.createConnection();\r\n    var request = db.createRequest(\"PregledKartice.spUser_Select\", conn);\r\n\r\n    request.addParameter(\"PkUsera\", TYPES.Int, req.query.pkUsera);\r\n\r\n    db.execStoredProc(request, conn, res, \"{}\");\r\n});\r\n\r\n//dohvat podataka o svim predmetima koje profesor predaje na zadanoj akademskoj godini\r\nrouter.get(\"/PrikazPredmetaProfesor\", function (req, res) {\r\n    var conn = db.createConnection();\r\n    var request = db.createRequest(\"PregledKartice.spPrikazPredmetaZaNastavnikaSuradnika\", conn);\r\n\r\n    request.addParameter(\"PkSkolskaGodina\", TYPES.Int, req.query.PkSkolskaGodina);\r\n    request.addParameter(\"PkNastavnikSuradnik\", TYPES.Int, req.query.PkNastavnikSuradnik);\r\n\r\n    db.execStoredProc(request, conn, res, \"{}\");\r\n});\r\n\r\n//dohvat podataka o predmetu na odredenom studiju \r\nrouter.get(\"/PrikazPredmetaOsnovniPodaci\", function (req, res) {\r\n    var conn = db.createConnection();\r\n    var request = db.createRequest(\"PregledKartice.spPredmetOsnovniPodaci_select\", conn);\r\n\r\n    request.addParameter(\"PkSkolskaGodinaStudijPredmetKatedra\", TYPES.Int, req.query.PkSkolskaGodinaStudijPredmetKatedra);\r\n\r\n    db.execStoredProc(request, conn, res, \"{}\");\r\n});\r\n\r\n//dohvat podataka o studentima na odredenom predmetu\r\nrouter.get(\"/PrikazStudenataPoPredmetu\", function (req, res) {\r\n    var conn = db.createConnection();\r\n    var request = db.createRequest(\"PregledKartice.spPredmetStudenti_select\", conn);\r\n\r\n    request.addParameter(\"PkSkolskaGodinaStudijPredmetKatedra\", TYPES.Int, req.query.PkSkolskaGodinaStudijPredmetKatedra);\r\n\r\n    db.execStoredProc(request, conn, res, \"{}\");\r\n});\r\n\r\n// dohvat domiclinih podataka za EduCard\r\nrouter.get(\"/DohvatDomicilnihVrijednostiEduCard\", function (req, res) {\r\n    var conn = db.createConnection();\r\n    var request = db.createRequest(\"PregledKartice.spKonfiguracijaDomicilnihVrijednostiEduCard_Select\", conn);\r\n\r\n    db.execStoredProc(request, conn, res, \"{}\");\r\n});\r\n\r\n\r\n//dohvat podataka o nastavnim cjelinama na odredenom predmetu \r\nrouter.get(\"/PrikazNastavnihCjelina\", function (req, res) {\r\n    var conn = db.createConnection();\r\n    var request = db.createRequest(\"PregledKartice.spPredmetNastavneCjeline_select\", conn);\r\n\r\n    request.addParameter(\"PkPredmet\", TYPES.Int, req.query.PkPredmet);\r\n\r\n    db.execStoredProc(request, conn, res, \"{}\");\r\n});\r\n\r\n//dohvat podataka o nastavnim cjelinama na odredenom predmetu za studenta\r\nrouter.get(\"/StudentPrikazNastavniMaterijali\", function(req, res) {\r\n    var conn = db.createConnection();\r\n    var request = db.createRequest( \"PregledKartice.spStudentNastavniMaterijali_Select\", conn); \r\n\r\n    request.addParameter(\"PkPredmet\", TYPES.Int, req.query.PkPredmet);\r\n\r\n    db.execStoredProc(request, conn, res, \"{}\");\r\n}); \r\n\r\n\r\n//Vraca sve otimbrane studente na nastavnoj satnici\r\nrouter.get(\"/StudentPrisutnostNaNastavi\", function (req, res) {\r\n    req.query.PkNastavaPlan = req.query.PkNastavaPlan == \"null\" ? null : req.query.PkNastavaPlan;\r\n    req.query.PkNastavaRealizacija = req.query.PkNastavaRealizacija == \"null\" ? null : req.query.PkNastavaRealizacija;\r\n\r\n\r\n    var conn = db.createConnection();\r\n    var request = db.createRequest(\"PregledKartice.spStudentPrisutnostNaNastavi_Select\", conn);\r\n\r\n    request.addParameter(\"PkNastavaPlan\", TYPES.Int, req.query.PkNastavaPlan);\r\n    request.addParameter(\"PkNastavaRealizacija\", TYPES.Int, req.query.PkNastavaRealizacija);\r\n\r\n    db.execStoredProc(request, conn, res, \"{}\");\r\n});\r\n\r\n\r\n// Dohvaca sve otibrane studente za odredeni termin {Datum, PkSatnica, PkPredavaonica}\r\nrouter.get(\"/StudentPrisutnostNaNastaviZaTermin\", function(req, res) {\r\n\r\n    var conn = db.createConnection();\r\n    var request = db.createRequest(\"PregledKartice.spStudentPrisutnostNaNastaviZaTermin_Select\", conn); \r\n    \r\n    request.addParameter(\"PkPredavaonica\", TYPES.Int, req.query.PkPredavaonica);\r\n    request.addParameter(\"PkSatnica\", TYPES.Int, req.query.PkSatnica);\r\n    request.addParameter(\"Datum\", TYPES.NVarChar, req.query.Datum);\r\n\r\n    db.execStoredProc(request, conn, res, \"{}\");\r\n});\r\n\r\n// dohvat svih nastavnika suradnika\r\nrouter.get(\"/NastavnikSuradnikSvi\", function (req, res) {\r\n    var conn = db.createConnection();\r\n    var request = db.createRequest(\"PregledKartice.spNastavnikSuradnikSvi_select\", conn);\r\n\r\n    db.execStoredProc(request, conn, res, \"{}\");\r\n});\r\n\r\n// dohvat svih nastavnika suradnika \r\nrouter.get(\"/PrikazDogadajaNaDatum\", function (req, res) {\r\n    var conn = db.createConnection();\r\n    var request = db.createRequest(\"PregledKartice.spPrikazDogadajaNaDatum_Select\", conn);\r\n\r\n    request.addParameter(\"Datum\", TYPES.NVarChar, req.query.Datum);\r\n    request.addParameter(\"PkPredavaonica\", TYPES.Int, req.query.PkPredavaonica);\r\n\r\n    db.execStoredProc(request, conn, res, \"{}\");\r\n});\r\n\r\nfunction prepareStudentTableData(data) {\r\n    var tableParametar = {\r\n        columns: [\r\n\r\n            {\r\n                name: 'PkStudent',\r\n                type: TYPES.Int\r\n            },\r\n            { //typo u db\r\n                name: 'PkEducardReaderData',\r\n                type: TYPES.Int\r\n            },\r\n            {\r\n                name: 'ProfesorIskljucioDaNe',\r\n                type: TYPES.Bit\r\n            },\r\n            {\r\n                name: 'PkStudij',\r\n                type: TYPES.Int\r\n            }\r\n\r\n        ],\r\n        rows: []\r\n    };\r\n\r\n    data.forEach(e => {\r\n        tableParametar.rows.push([\r\n            e.PkStudent,\r\n            e.PkEduCardReaderData,\r\n            e.ProfesorIskljucioDaNe,\r\n            e.PkStudij\r\n        ])\r\n    });\r\n\r\n    return tableParametar;\r\n}\r\n//slika varbinary(MAX)\r\n\r\nrouter.post(\"/NastavaRealizacijaPlana\", function (req, res) {\r\n    var conn = db.createConnection();\r\n    var request = db.createRequest(\"PregledKartice.spNastavaRealizacijaPlana_Insert\", conn);\r\n\r\n    var table = prepareStudentTableData(req.body.params.PrisutniStudenti);\r\n    request.addParameter(\"PkNastavaPlan\", TYPES.Int, req.body.params.PkNastavaPlan);\r\n    request.addParameter(\"PkNastavnikSuradnik\", TYPES.Int, req.body.params.PkNastavnikSuradnik);\r\n    request.addParameter(\"PkUsera\", TYPES.Int, req.body.params.PkUsera);\r\n    request.addParameter(\"PkPredavaonica\", TYPES.Int, req.body.params.PkPredavaonica);\r\n    request.addParameter(\"Datum\", TYPES.NVarChar, req.body.params.Datum);\r\n    request.addParameter(\"PkSatnica\", TYPES.Int, req.body.params.PkSatnica);\r\n\r\n    request.addParameter('PrisutniStudenti', TYPES.TVP, table);\r\n\r\n    db.execStoredProc(request, conn, res, \"{}\");\r\n});\r\n\r\nrouter.delete(\"/NastavaRealizacijaPlana\", function (req, res) {\r\n    var conn = db.createConnection();\r\n    var request = db.createRequest(\"PregledKartice.spNastavaRealizacijaPlana_Delete\", conn);\r\n    request.addParameter(\"PkNastavaRealizacija\", TYPES.Int, req.query.PkNastavaRealizacija);\r\n    request.addParameter(\"PkUsera\", TYPES.Int, req.query.PkUsera);\r\n\r\n\r\n    db.execStoredProc(request, conn, res, \"{}\");\r\n});\r\n\r\n// nedovrsen api za kopiranje tokena iz ex2 u ex3\r\nrouter.post('/setAuth', function (req, res) {\r\n    localStorage.setItem(\"AuthToken\", res);\r\n});\r\n\r\n//dohvat podataka o PodTipovima predavanja \r\nrouter.get('/getPodTipovePredavanja', function (req, res) {\r\n    var conn = db.createConnection();\r\n    var request = db.createRequest(\"PregledKartice.spTipPredavanjaZaPredmet_Select\", conn);\r\n\r\n    request.addParameter(\"PkSkolskaGodinaStudijPredmetKatedra\", TYPES.Int, req.query.PkSkolskaGodinaStudijPredmetKatedra);\r\n\r\n    db.execStoredProc(request, conn, res, \"{}\");\r\n});\r\n\r\n//dohvat podataka o nastavnim cjelinama na odredenom predmetu \r\nrouter.get('/getGrupeZaNastavu', function (req, res) {\r\n    var conn = db.createConnection();\r\n    var request = db.createRequest(\"PregledKartice.spGrupaZaNastavuSkolskaGodina_ComboSelect\", conn);\r\n\r\n    request.addParameter(\"PkPredmet\", TYPES.Int, req.query.PkPredmet);\r\n    request.addParameter(\"PkStudij\", TYPES.Int, req.query.PkStudij);\r\n    request.addParameter(\"PkSkolskaGodina\", TYPES.Int, req.query.PkSkolskaGodina);\r\n    request.addParameter(\"PkPodTipPredavanja\", TYPES.Int, req.query.PkPodTipPredavanja);\r\n\r\n    db.execStoredProc(request, conn, res, \"{}\");\r\n});\r\n\r\nrouter.get('/SveSatnicePoRednomBroju', function (req, res) {\r\n    var conn = db.createConnection();\r\n    var request = db.createRequest(\"PregledKartice.spSveSatnicePoRednomBroju_Select\", conn);\r\n\r\n    db.execStoredProc(request, conn, res, \"{}\");\r\n});\r\n\r\n//dohvat podataka o nastavnim cjelinama na odredenom predmetu \r\nrouter.get(\"/getStudentiRasporedeniPoGrupama\", function (req, res) {\r\n    var conn = db.createConnection();\r\n    var request = db.createRequest(\"PregledKartice.spStudentiRasporedjeniPoGrupama\", conn\r\n    );\r\n\r\n    request.addParameter(\"PkSkolskaGodina\", TYPES.Int, req.query.PkSkolskaGodina);\r\n    request.addParameter(\"PkSkolskaGodinaStudijGrupaZaNastavu\", TYPES.Int, req.query.PkSkolskaGodinaStudijGrupaZaNastavu);\r\n\r\n    db.execStoredProc(request, conn, res, \"{}\");\r\n});\r\n// dohvat studenata za comboBox u kalendaru za realizaciju\r\nrouter.get('/StudentiKalendarComboBox', function (req, res) {\r\n    var conn = db.createConnection();\r\n    var request = db.createRequest(\"PregledKartice.spStudenti_Select\", conn);\r\n\r\n    request.addParameter(\"PkSkolskaGodina\", TYPES.Int, req.query.PkSkolskaGodina);\r\n\r\n    db.execStoredProc(request, conn, res, \"{}\");\r\n});\r\n\r\n//Post req za dodavanje nove nastavnecjeline u bazu\r\nrouter.post(\"/dodajNastavnaCjelina\", function (req, res) {\r\n    var conn = db.createConnection();\r\n    var request = db.createRequest(\"PregledKartice.spPredmetNastavnaCjelina_Insert\", conn);\r\n\r\n    request.addParameter(\"PkPredmet\", TYPES.Int, req.body.params.PkPredmet);\r\n    request.addParameter(\"NazivPredmetNastavnaCjelina\", TYPES.VarChar, req.body.params.NazivPredmetNastavnaCjelina);\r\n    request.addParameter(\"KoristiSeDaNe\", TYPES.Bit, req.body.params.KoristiSeDaNe);\r\n    request.addParameter(\"PkUsera\", TYPES.Int, req.body.params.PkUsera);\r\n\r\n\r\n    db.execStoredProc(request, conn, res, \"{}\");\r\n});\r\n\r\n//Delete req za brisanje nastavne cjeline iz baze\r\nrouter.delete(\"/izbrisiNastavnaCjelina\", function (req, res) {\r\n    var conn = db.createConnection();\r\n    var request = db.createRequest(\"PregledKartice.spPredmetNastavnaCjelina_Delete\", conn);\r\n\r\n    request.addParameter(\"PkPredmetNastavnaCjelina\", TYPES.Int, req.query.PkPredmetNastavnaCjelina);\r\n    request.addParameter(\"PkUsera\", TYPES.Int, req.query.PkUsera);\r\n\r\n\r\n    db.execStoredProc(request, conn, res, \"{}\");\r\n});\r\n\r\n//Put req za update nastavne cjeline iz baze\r\nrouter.put(\"/promjeniNastavnaCjelina\", function (req, res) {\r\n    var conn = db.createConnection();\r\n    var request = db.createRequest(\"PregledKartice.spPredmetNastavnaCjelina_Update\", conn);\r\n\r\n    request.addParameter(\"PkPredmetNastavnaCjelina\", TYPES.Int, req.body.params.PkPredmetNastavnaCjelina);\r\n    request.addParameter(\"PkPredmet\", TYPES.Int, req.body.params.PkPredmet);\r\n    request.addParameter(\"NazivPredmetNastavnaCjelina\", TYPES.VarChar, req.body.params.NazivPredmetNastavnaCjelina);\r\n    request.addParameter(\"KoristiSeDaNe\", TYPES.Bit, req.body.params.KoristiSeDaNe);\r\n    request.addParameter(\"PkUsera\", TYPES.Int, req.body.params.PkUsera);\r\n\r\n    db.execStoredProc(request, conn, res, \"{}\");\r\n});\r\n\r\n// dohvat svih profesora na predmetu\r\nrouter.get(\"/getProfesoriNaPredmetu\", function (req, res) {\r\n    var conn = db.createConnection();\r\n    var request = db.createRequest(\"PregledKartice.spPrikazNastavnikaSuradnikaPoPredmetu\", conn);\r\n\r\n    request.addParameter(\"PkPredmet\", TYPES.Int, req.query.PkPredmet);\r\n    request.addParameter(\"PkSkolskaGodina\", TYPES.Int, req.query.PkSkolskaGodina);\r\n\r\n    db.execStoredProc(request, conn, res, \"{}\");\r\n});\r\n\r\n//Put req za update ocjene iz baze \r\nrouter.put(\"/promjenaOcjene\", function (req, res) {\r\n    var conn = db.createConnection();\r\n    var request = db.createRequest(\"PregledKartice.spStudentOcjene_Update\", conn);\r\n\r\n    request.addParameter(\"PkStudentnaVisokomUcilistuPredmet\", TYPES.Int, req.params.PkStudentnaVisokomUcilistuPredmet);\r\n    request.addParameter(\"PkOcjenjivac\", TYPES.Int, req.body.params.PkOcjenjivac);\r\n    request.addParameter(\"PolozenDaNe\", TYPES.Bit, req.body.params.PolozenDaNe);\r\n    request.addParameter(\"OslobodjenPolaganjaDaNe\", TYPES.Bit, req.body.params.OslobodjenPolaganjaDaNe);\r\n    request.addParameter(\"Ocjena\", TYPES.Int, req.body.params.Ocjena);\r\n    request.addParameter(\"PkUsera\", TYPES.Int, req.body.params.PkUsera);\r\n\r\n\r\n    db.execStoredProc(request, conn, res, \"{}\");\r\n});\r\n\r\n// --------------------------------------------------------\r\n\r\n// FILE UPLOAD\r\n\r\n// --------------------------------------------------------\r\nvar putanjaFile = '';\r\n\r\nvar storage = multer.diskStorage({\r\n    destination: function (req, file, callback) {\r\n        callback(null, appConfig.uploadPath + putanjaFile);\r\n    },\r\n    filename: function (req, file, callback) {\r\n        fs.exists(appConfig.uploadPath + putanjaFile + file.originalname, function (exists) {\r\n            var uploadedFileName;\r\n            uploadedFileName = Date.now() + '_' + file.originalname;\r\n            callback(null, '' + uploadedFileName);\r\n        });\r\n\r\n    }\r\n\r\n});\r\n\r\nvar upload = multer({\r\n    storage: storage\r\n});\r\n\r\nfunction checkUploadPath(req, res, next) {\r\n    // iz poziva funkcije dolazi ID Predmeta, ali ga za sada ne koristimo\r\n    // putanjaFile = req.query.putanja.replace(/\\W/g, ' ');\r\n    // putanjaFile = putanjaFile.replace(/\\s\\s+/g, ' ');\r\n    // Za sada radimo direktorije strukture godina mjesec\r\n    var d = new Date();\r\n    var tmpDate = new Date(d.getTime());     // uzimamo godinu\r\n    var y = tmpDate.getFullYear();\r\n\r\n    // uzimamo broj mjeseca. Obzirom da broj mjeseca pocinje sa 0, dodajem 1 \r\n    var m = tmpDate.getMonth() + 1;\r\n    putanjaFile = y + '_' + m;\r\n\r\n    //da se datoteke iz Excel taba spremaju u drugi dir\r\n    // if (req.query.data && JSON.parse(req.query.data).putanja) {\r\n    //     if (JSON.parse(req.query.data).putanja === \"UcitavanjePodataka\") {\r\n    //         putanjaFile = 'UcitavanjePodataka';\r\n\r\n    //     }\r\n\r\n    // } else {\r\n    //     if (req.query.putanja === \"UcitavanjePodataka\") {\r\n    //         putanjaFile = 'UcitavanjePodataka';\r\n    //     } }\r\n    fs.exists(appConfig.uploadPath + putanjaFile, function (exists) {\r\n        if (exists) {\r\n            next();\r\n        } else {\r\n            fs.mkdir(appConfig.uploadPath + putanjaFile, function (err) {\r\n                if (err) {\r\n                    console.log('Error in folder creation');\r\n                    next();\r\n                }\r\n                next();\r\n            });\r\n        }\r\n    });\r\n};\r\n\r\nrouter.post('/fileUpload', checkUploadPath, upload.single('file'), function (req, res) { \r\n    \r\n     var PkUsera,\r\n     PkKategorijaDokumenta,\r\n     AkademskaGodina,\r\n     Opis,\r\n     VidljivStudentimaDaNe,\r\n     OznakaDokumenta,\r\n     PkPredmet,\r\n     PkNastavnikSuradnik\r\n\r\n    if (req.query.data) {\r\n        PkUsera = JSON.parse(req.query.data).PkUsera;\r\n        PkKategorijaDokumenta = JSON.parse(req.query.data).PkKategorijaDokumenta;\r\n        AkademskaGodina = JSON.parse(req.query.data).akademskaGodina;\r\n        Opis = this.JSON.parse(req.query.data).opis;\r\n        VidljivStudentimaDaNe = JSON.parse(req.query.data).vidljivoStudentima;\r\n        OznakaDokumenta = JSON.parse(req.query.data).oznakaDokumenta;\r\n        PkPredmet = JSON.parse(req.query.data).PkPredmet;\r\n        PkNastavnikSuradnik = JSON.parse(req.query.data).PkNastavnikSuradnik;\r\n\r\n        // PkOrganizacijskaJedinica = JSON.parse(req.query.data).PkOrganizacijskaJedinica;\r\n    }\r\n    setTimeout(function () {\r\n\r\n        var conn = db.createConnection(); //res.locals.currDatabase\r\n        var requestDatoteka = db.createRequest(\"PregledKartice.spDatoteka_Insert\", conn);\r\n\r\n        requestDatoteka.addParameter('originalname', TYPES.NVarChar, req.file.originalname);\r\n        requestDatoteka.addParameter('encoding', TYPES.NVarChar, req.file.encoding);\r\n        requestDatoteka.addParameter('mimetype', TYPES.NVarChar, req.file.mimetype);\r\n        requestDatoteka.addParameter('destination', TYPES.NVarChar, req.file.destination);\r\n        requestDatoteka.addParameter('filename', TYPES.NVarChar, req.file.filename);\r\n        requestDatoteka.addParameter('path', TYPES.NVarChar, req.file.path);\r\n        requestDatoteka.addParameter('size', TYPES.Int, req.file.size);\r\n        requestDatoteka.addParameter('PkUsera', TYPES.Int, req.query.PkUsera ? req.query.PkUsera : PkUsera);\r\n        requestDatoteka.addOutputParameter('PkDatotekaDokumentPar', TYPES.Int);\r\n\r\n      \r\n        db.execStoredProcFromNodeNoPooler(requestDatoteka, conn, res, function (spResult, outputParams, dbResultObj) {\r\n       \r\n            if (spResult === 'OK' && outputParams) {\r\n                var conn2 = db.createConnection(); \r\n                if (PkKategorijaDokumenta == 2) { \r\n                    \r\n                    var requestDokument = db.createRequest(\"PregledKartice.spMaterijaliUNastavi_Insert\", conn);\r\n\r\n                    requestDokument.addParameter('PkKategorijaDokumenta', TYPES.Int, req.query.PkKategorijaDokumenta ? req.query.PkKategorijaDokumenta : PkKategorijaDokumenta);\r\n                    requestDokument.addParameter('PkPredmet', TYPES.Int, req.query.PkPredmet ? req.query.PkPredmet : PkPredmet);\r\n                    requestDokument.addParameter('AkademskaGodina', TYPES.NVarChar, req.query.AkademskaGodina ? req.query.AkademskaGodina : AkademskaGodina);\r\n                    requestDokument.addParameter('Opis', TYPES.NVarChar,  req.query.Opis ? req.query.Opis : Opis);\r\n                    requestDokument.addParameter('VidljivStudentimaDaNe', TYPES.Int,  req.query.VidljivStudentimaDaNe ? req.query.VidljivStudentimaDaNe : VidljivStudentimaDaNe);\r\n                    requestDokument.addParameter('OznakaDokumenta', TYPES.NVarChar, req.query.OznakaDokumenta ? req.query.OznakaDokumenta : OznakaDokumenta);\r\n                    requestDokument.addParameter('NazivDokumenta', TYPES.NVarChar, req.file.originalname);\r\n                    requestDokument.addParameter('PkUsera', TYPES.Int, req.query.PkUsera ? req.query.PkUsera : PkUsera);\r\n                    requestDokument.addParameter('PkDatotekaDokumentPar', TYPES.Int, outputParams.PkDatotekaDokumentPar\t)\r\n                    requestDokument.addOutputParameter('PkDokument', TYPES.Int);\r\n                }\r\n                else {\r\n                    \r\n                    var requestDokument = db.createRequest(\"PregledKartice.spOsobniDokumentiNS_Insert\", conn);\r\n\r\n                    requestDokument.addParameter('PkNastavnikSuradnik', TYPES.Int, req.query.PkNastavnikSuradnik ? req.query.PkNastavnikSuradnik : PkNastavnikSuradnik)\r\n                    requestDokument.addParameter('PkKategorijaDokumenta', TYPES.Int, req.query.PkKategorijaDokumenta ? req.query.PkKategorijaDokumenta : PkKategorijaDokumenta);\r\n                    requestDokument.addParameter('Opis', TYPES.NVarChar,  req.query.Opis ? req.query.Opis : Opis);\r\n                    requestDokument.addParameter('OznakaDokumenta', TYPES.NVarChar, req.query.OznakaDokumenta ? req.query.OznakaDokumenta : OznakaDokumenta);\r\n                    requestDokument.addParameter('NazivDokumenta', TYPES.NVarChar, req.file.filename);\r\n                    requestDokument.addParameter('PkUsera', TYPES.Int, req.query.PkUsera ? req.query.PkUsera : PkUsera);\r\n                    requestDokument.addParameter('PkDatotekaDokumentPar', TYPES.Int, outputParams.PkDatotekaDokumentPar\t)\r\n                    requestDokument.addOutputParameter('PkDokument', TYPES.Int);\r\n                }\r\n                \r\n                db.execStoredProc(requestDokument, conn2, res, \"{}\");\r\n            } else {\r\n                res.status(500).end();\r\n            }\r\n        });\r\n\r\n    }, 1000);\r\n});\r\n\r\n//Select svih nastavnih materijala za odabrani predmet\r\nrouter.get(\"/getProfesorNastavniMaterijali\", function (req, res) {\r\n    var conn = db.createConnection();\r\n    var request = db.createRequest(\"PregledKartice.spNastavnikSuradnikNastavniMaterijali_Select\", conn);\r\n\r\n    request.addParameter(\"PkPredmet\", TYPES.Int, req.query.PkPredmet);\r\n\r\n    db.execStoredProc(request, conn, res, \"{}\");\r\n});\r\n\r\n//Select svih nastavnih materijala za odabrani predmet\r\nrouter.put(\"/putProfesorNastavniMaterijali\", function (req, res) {\r\n    var conn = db.createConnection();\r\n    var request = db.createRequest(\"PregledKartice.spPredmetNastavnikSuradnikNastavniMaterijali_Update\", conn);\r\n\r\n    request.addParameter(\"PkMaterijaliUNastavi\", TYPES.Int, req.body.params.PkMaterijaliUNastavi);\r\n    request.addParameter(\"PkUseraPromjena\", TYPES.Int, req.body.params.PkUseraPromjena);\r\n    request.addParameter(\"Opis\", TYPES.VarChar, req.body.params.Opis);\r\n    request.addParameter(\"VidljivStudentimaDaNe\", TYPES.Bit, req.body.params.VidljivStudentimaDaNe);\r\n    request.addParameter(\"OznakaDokumenta\", TYPES.VarChar, req.body.params.OznakaDokumenta);\r\n\r\n    db.execStoredProc(request, conn, res, \"{}\");\r\n});\r\n\r\n\r\n// File download direktno u browser\r\nrouter.get('/fileDownload', function (req, res) {\r\n    \r\n    var filePath = req.query.path;\r\n\r\n    // uzmimo parametar originalname iz req i postavimo ga tako da browser vidi to ime kod downloada    \r\n    var fileName = req.query.originalname;\r\n\r\n    fs.exists(filePath, function (exists) {\r\n        if (exists) {\r\n            // posaljimo datoteku browseru\r\n            res.download(filePath, fileName);\r\n        } else {\r\n            //  ako nema datoteke, pošaljimo obavijest\r\n            req.query.language == 'hr' ? res.download(appConfig.uploadPath + 'NoFileHR.pdf', 'Error_NoFile.pdf') : res.download(appConfig.uploadPath + 'NoFileEN.pdf', 'Error_NoFile.pdf');\r\n        }\r\n\r\n    });\r\n\r\n});\r\n\r\nfunction checkMimeTypeSupported(mimeType) {\r\n\r\n    // niz podrzanih mimetype-ova za prikaz\r\n\r\n    const supportedMimeTypes = [\r\n\r\n        'video/mp4',\r\n\r\n        'video/ogg',\r\n\r\n        'video/webm',\r\n\r\n        'audio/mpeg',\r\n\r\n        'audio/mp3',\r\n\r\n        'audio/ogg',\r\n\r\n        'audio/wav',\r\n\r\n        'image/jpeg',\r\n\r\n        'image/png',\r\n\r\n        'application/pdf'\r\n\r\n    ];\r\n\r\n    return supportedMimeTypes.includes(mimeType);\r\n\r\n}\r\n\r\nrouter.get('/fileDownload2Object', function (req, res) {\r\n \r\n    var filePath = req.query.path;\r\n    var mimetype = req.query.mimetype;\r\n \r\n    fs.exists(filePath, function (exists) {\r\n        if (exists) {\r\n            if (checkMimeTypeSupported(mimetype)) {\r\n                // posaljimo datoteku browseru\r\n                res.setHeader('Content-type', mimetype);\r\n                fs.readFile(filePath, function (err, data) {\r\n                    res.send(data);\r\n                });\r\n\r\n            } else {\r\n                //  ako ne podrzavamo type\r\n                res.setHeader('Content-type', 'application/pdf');\r\n                fs.readFile(appConfig.uploadPath + 'NepodrzaniTip.pdf', function (err, data) {\r\n                    res.send(data);\r\n\r\n                });\r\n\r\n            }\r\n        } else {\r\n            //  ako nema datoteke, pošaljimo obavijest\r\n            res.setHeader('Content-type', 'application/pdf');\r\n            if(req.query.language === 'hr') {\r\n                fs.readFile(appConfig.uploadPath + 'NoFileHR.pdf', function (err, data) {\r\n                    res.send(data);\r\n                });\r\n            }\r\n            else {\r\n                fs.readFile(appConfig.uploadPath + 'NoFileEN.pdf', function (err, data) {\r\n                    res.send(data);\r\n                });\r\n            }\r\n            \r\n\r\n        }\r\n\r\n    })\r\n\r\n \r\n\r\n});\r\n\r\n\r\n//delete nastavnih materijala (put request jer se vrši \"soft\" delete tj. mijenja se vrijednsot u tablici IzbrisanDaNe u iz 0 u 1)\r\nrouter.put(\"/deleteProfesorNastavniMaterijali\", function (req, res) {\r\n    var conn = db.createConnection();\r\n    var request = db.createRequest(\"PregledKartice.spNastavniMaterijali_Delete\", conn);\r\n\r\n    request.addParameter(\"PkDokument\", TYPES.Int, req.body.params.PkDokument);\r\n \r\n    db.execStoredProc(request, conn, res, \"{}\");\r\n});\r\n\r\n//Select svih osobnih dokumenata za odabrani predmet\r\nrouter.get(\"/getProfesorOsobniDokumenti\", function (req, res) {\r\n    var conn = db.createConnection();\r\n    var request = db.createRequest(\"PregledKartice.spNastavnikSuradnikOsobniDokumenti_Select\", conn);\r\n\r\n    request.addParameter(\"PkNastavnikSuradnik\", TYPES.Int, req.query.PkNastavnikSuradnik);\r\n\r\n    db.execStoredProc(request, conn, res, \"{}\");\r\n});\r\n\r\n//edit osobnih dokumenata\r\nrouter.put(\"/putProfesorOsobniDokumenti\", function (req, res) {\r\n    var conn = db.createConnection();\r\n    var request = db.createRequest(\"PregledKartice.spPredmetNastavnikSuradnikOsobniDokumenti_Update\", conn);\r\n\r\n    request.addParameter(\"PkOsobniDokumentiNS\", TYPES.Int, req.body.params.PkOsobniDokumentiNS);\r\n    request.addParameter(\"PkUseraPromjena\", TYPES.Int, req.body.params.PkUseraPromjena);\r\n    request.addParameter(\"Opis\", TYPES.VarChar, req.body.params.Opis);\r\n    request.addParameter(\"OznakaDokumenta\", TYPES.VarChar, req.body.params.OznakaDokumenta);\r\n\r\n \r\n    db.execStoredProc(request, conn, res, \"{}\");\r\n});\r\n\r\n// dohvat svih predavaonica\r\nrouter.get(\"/Predavaonice\", function(req, res) {\r\n    var conn = db.createConnection();\r\n    var request = db.createRequest(\"PregledKartice.spPredavaonica_Select\", conn);\r\n    \r\n    db.execStoredProc(request, conn, res, \"{}\");\r\n}); \r\n\r\n// dohvat svih predmeta po pripadajućoj grupi predmeta\r\nrouter.get(\"/getPredmetiUGrupiPredmeta\", function (req, res) {\r\n    var conn = db.createConnection();\r\n    var request = db.createRequest(\"PregledKartice.spGrupaPredmetaPredmeti\", conn);\r\n\r\n    request.addParameter(\"PkPredmet\", TYPES.Int, req.query.PkPredmet);\r\n\r\n    db.execStoredProc(request, conn, res, \"{}\");\r\n});\r\n\r\n\r\nmodule.exports = router;\r\n","var appConfig = {};\r\n\r\nappConfig.checkAuthHeader = false; // true - provjera logina ukljucena, false - provjera logina iskljucena\r\nappConfig.applicationPort = 8090;\r\nappConfig.databaseServer = \"lamasqlrazvoj\";\r\n// appConfig.databaseServer = \"cloudvm2.westeurope.cloudapp.azure.com\";\r\n// appConfig.instanceName = \"MSSQLSERVER\";\r\n// appConfig.instanceName = \"MSSQLSERVER\";\r\n// appConfig.databaseName = \"EduPlan_Turnusno\";\r\nappConfig.databaseName = \"EduPlanRazvoj\";\r\n// appConfig.databaseName = \"EduPlan_Semestralno\";\r\n// appConfig.username = \"sa\";\r\n// appConfig.password = \"Glupan2000\";\r\nappConfig.username = \"eduplannew\";\r\nappConfig.password = \"eduplan\";\r\nappConfig.appVerzija = '0.9';\r\nappConfig.uploadPath = '../uploads/';\r\n\r\noptions: {\r\n    encrypt: true\r\n}\r\n\r\nmodule.exports = appConfig;\r\n","var greska = [], // objekt koji vraca gresku\r\n    outputvalue = [], // output parametar kod azuriranja podataka\r\n    appConfig = require('./appConfig.js'),\r\n    ConnectionPool = require('tedious-connection-pool');\r\n    \r\n// konfiguracija za pooler\r\nvar config = {\r\n  server: appConfig.databaseServer,\r\n  instanceName: appConfig.instancename,\r\n  userName: appConfig.username,\r\n  password: appConfig.password,\r\n  options: {\r\n    encrypt: true,\r\n    database: appConfig.databaseName\r\n  }\r\n};\r\nif (appConfig.instanceName !== '') {\r\n  config.options.instanceName = appConfig.instanceName;\r\n}\r\n\r\nvar poolConfig = {\r\n  min: 2,\r\n  max: 4,\r\n  log: false,\r\n  acquireTimeout: 300000\r\n};\r\nvar pool = new ConnectionPool(poolConfig, config);\r\n\r\nfunction createConnection() {\r\n  var config = {\r\n    server: appConfig.databaseServer,\r\n    instanceName: appConfig.instancename,\r\n    \r\n    // nova verzija logiranja Tediousa\r\n    // authentication: {\r\n    //   type: \"default\",\r\n    //   options: {\r\n    //     userName: appConfig.username,\r\n    //     password: appConfig.password,\r\n    //   }\r\n    // },\r\n\r\n    // stara verzija logiranja Tediousa\r\n    userName: appConfig.username,\r\n    password: appConfig.password,\r\n\r\n    options: {\r\n      encrypt: true,\r\n      database: appConfig.databaseName\r\n    }\r\n  };\r\n  var Connection = require('tedious').Connection;\r\n  var connection = new Connection(config);\r\n  return connection;\r\n}\r\n\r\nfunction createRequest(query, connection) {\r\n  var Request = require('tedious').Request;\r\n  var req =\r\n    new Request(query,\r\n      function (err, rowCount) {\r\n        if (err) {\r\n          //logger.log('error in db.createRequest', err);\r\n        }\r\n        connection && connection.close();\r\n      });\r\n  return req;\r\n}\r\n\r\nfunction createRequestPool(query, connection) {\r\n  var Request = require('tedious').Request;\r\n  var req =\r\n    new Request(query,\r\n      function (err, rowCount) {\r\n        if (err) {\r\n          //logger.log('error in db.createRequest', err);\r\n        }\r\n        connection.release();\r\n      });\r\n  return req;\r\n}\r\n\r\nfunction stream(query, connection, output, defaultContent) {\r\n  errorHandler = function (ex) {\r\n    throw ex;\r\n  };\r\n  var request = query;\r\n  if (typeof query == \"string\") {\r\n    request = this.createRequest(query, connection);\r\n  }\r\n\r\n  var empty = true;\r\n  request.on('row', function (columns) {\r\n    empty = false;\r\n    output.write(columns[0].value);\r\n  });\r\n\r\n  request.on('done', function (rowCount, more, rows) {\r\n    if (empty) {\r\n      output.write(defaultContent);\r\n    }\r\n    output.end();\r\n  });\r\n\r\n  var empty = true;\r\n  request.on('row', function (columns) {\r\n    empty = false;\r\n    output.write(columns[0].value);\r\n  });\r\n\r\n  request.on('done', function (rowCount, more, rows) {\r\n    if (empty) {\r\n      output.write(defaultContent);\r\n    }\r\n    output.end();\r\n  });\r\n\r\n  request.on('doneProc', function (rowCount, more, returnStatus, rows) {\r\n    if (empty) {\r\n      output.write(defaultContent);\r\n    }\r\n    output.end();\r\n  });\r\n\r\n  connection.on('connect', function (err) {\r\n    if (err) {\r\n      //logger.log('error in db.Stream.Connection on:', err);\r\n    }\r\n    connection.execSql(request);\r\n  });\r\n}\r\n\r\nfunction execStoredProc(query, connection, output, defaultContent, callback) {\r\n  var request = query;\r\n  greska = [];\r\n  outputvalue = [];\r\n  if (typeof query == \"string\") {\r\n    request = this.createRequest(query, connection);\r\n  }\r\n  var empty = true;\r\n  request.on('row', function (columns) {\r\n    empty = false;\r\n    output.write(columns[0].value);\r\n  });\r\n  request.on('done', function (rowCount, more, rows) {\r\n    if (empty) {\r\n      output.write(defaultContent);\r\n    }\r\n    output.end();\r\n  });\r\n\r\n  request.on('doneProc', function (rowCount, more, returnStatus, rows) {\r\n    if (typeof callback === 'function' && greska.length === 0) {\r\n      callback(outputvalue);\r\n    }\r\n    if (greska.length > 0) {\r\n      output.status(500).write(JSON.stringify(greska[0]));\r\n    }\r\n    if (empty && greska.length == 0) {\r\n      output.write(JSON.stringify(outputvalue));\r\n    }\r\n    outputvalue = [];\r\n    output.end();\r\n  });\r\n\r\n  request.on('returnValue', function (parameterName, value, metadata) {\r\n    var temp = {};\r\n    temp[parameterName] = value;\r\n    outputvalue.push(temp);\r\n  });\r\n\r\n  connection.on('errorMessage', function (err) {\r\n    //logger.log('error in db.execStoredProc.connection on', err);\r\n    if (err) {\r\n      greska.push(err);\r\n    }\r\n  });\r\n\r\n  connection.on('connect', function (err) {\r\n    if (err) {\r\n      console.log(err);\r\n    }\r\n    connection.callProcedure(request);\r\n  });\r\n};\r\n\r\nfunction execStoredProcFromNode(query, connection, output, callback) {\r\n  var request = query,\r\n    greska = [],\r\n    outputvalue = [],\r\n    outputParams = {},\r\n    dbResultObj = [],\r\n    resultRowCount = 0,\r\n    empty = true;\r\n\r\n  request.on('doneProc', function (rowCount, more, returnStatus, rows) {\r\n    if (greska.length > 0) {\r\n      output = 'NOK';\r\n      callback(output, outputParams, dbResultObj);\r\n    }\r\n    if (empty && greska.length == 0) {\r\n      output = 'OK';\r\n      callback(output, outputParams, dbResultObj);\r\n    }\r\n  });\r\n\r\n  request.on('row', function (columns) {\r\n    var rowObject = {};\r\n    columns.forEach(function (column) {\r\n      rowObject[column.metadata.colName] = column.value;\r\n    });\r\n    dbResultObj.push(rowObject);\r\n  });\r\n\r\n  connection.on('errorMessage', function (err) {\r\n    console.log('errorMessage');\r\n    console.log('err', err)\r\n    if (err) {\r\n      greska.push(err);\r\n    }\r\n  });\r\n\r\n  request.on('returnValue', function (parameterName, value, metadata) {\r\n    outputParams[parameterName] = value;\r\n  });\r\n\r\n  //Ako se koristi s obicnom konekcijom, mora se pozvati unutar eventa\r\n  // connection.on('connect', function (err) {\r\n  //     if (err) {\r\n  //         logger.log('error in db.execStoredProcFromNode.connection.on:', err);\r\n  //     }\r\n  //    connection.callProcedure(request);\r\n  // });\r\n\r\n  //radi samo sa tedious poolerom\r\n  connection.callProcedure(request);\r\n};\r\n\r\nfunction execStoredProcNoJSONLocalResults(dbRequest, connection, req, res, callback) {\r\n  var request = dbRequest;\r\n  var resultData = [];\r\n  greska = [];\r\n\r\n  request.on('row', function (columns) {\r\n      var rowObject = {};\r\n      columns.forEach(function (column) {\r\n          rowObject[column.metadata.colName] = column.value;\r\n      });\r\n      resultData.push(rowObject);\r\n  });\r\n  request.on('doneProc', function () {\r\n      if (greska.length === 0) {\r\n          if (typeof callback === \"function\") {\r\n              callback({\r\n                  resultStatus: '0',\r\n                  resultData: resultData\r\n              }, req, res);\r\n          } else {\r\n              return {\r\n                  resultStatus: '0',\r\n                  resultData: resultData\r\n              }\r\n          }\r\n      } else {\r\n          if (typeof callback === \"function\") {\r\n              callback(greska, req, res);\r\n          } else {\r\n              return {\r\n                  greska\r\n              }\r\n          }\r\n      }\r\n  });\r\n  connection.on('errorMessage', function (err) {\r\n      console.log('error errorMessage', err.message);\r\n      if (err) {\r\n          greska = {\r\n              resultStatus: '9999',\r\n              resultData: err\r\n          };\r\n          return {\r\n              resultStatus: err.message,\r\n              resultData: err\r\n          }\r\n      }\r\n  });\r\n  connection.on('connect', function (err) {\r\n      if (err) {\r\n          // logger.log('error in db.execStoredProcPredmetLocal.connection.on:', err);\r\n          console.log('error connect');\r\n      }\r\n      connection.callProcedure(request);\r\n  });\r\n};\r\n\r\nfunction execStoredProcFromNodeNoPooler(query, connection, output, callback) {\r\n\r\n  var request = query,\r\n\r\n    greska = [],\r\n\r\n    outputvalue = [],\r\n\r\n    outputParams = {},\r\n\r\n    dbResultObj = [],\r\n\r\n    resultRowCount = 0,\r\n\r\n    empty = true;\r\n\r\n\r\n\r\n  request.on('doneProc', function (rowCount, more, returnStatus, rows) {\r\n\r\n    if (greska.length > 0) {\r\n\r\n      // output = 'NOK';\r\n\r\n      output = greska[0];\r\n\r\n      callback(output, outputParams, dbResultObj);\r\n\r\n    }\r\n\r\n    if (empty && greska.length == 0) {\r\n\r\n      //output.write(defaultContent);\r\n\r\n      output = 'OK';\r\n\r\n      callback(output, outputParams, dbResultObj);\r\n\r\n    }\r\n\r\n  });\r\n\r\n\r\n\r\n  request.on('row', function (columns) {\r\n\r\n    var rowObject = {};\r\n\r\n    columns.forEach(function (column) {\r\n\r\n      rowObject[column.metadata.colName] = column.value;\r\n\r\n    });\r\n\r\n    dbResultObj.push(rowObject);\r\n\r\n  });\r\n\r\n\r\n\r\n  connection.on('errorMessage', function (err) {\r\n\r\n    console.log('errorMessage');\r\n\r\n    console.log('err', err)\r\n\r\n    if (err) {\r\n\r\n      greska.push(err);\r\n\r\n    }\r\n\r\n  });\r\n\r\n\r\n\r\n  request.on('returnValue', function (parameterName, value, metadata) {\r\n\r\n    outputParams[parameterName] = value;\r\n\r\n  });\r\n\r\n\r\n\r\n  connection.on('connect', function (err) {\r\n\r\n    if (err) {\r\n\r\n      console.log(err);\r\n\r\n    }\r\n\r\n    connection.callProcedure(request);\r\n\r\n  });\r\n};\r\n\r\nmodule.exports.createConnection = createConnection;\r\nmodule.exports.pool = pool;\r\nmodule.exports.createRequest = createRequest;\r\nmodule.exports.createRequestPool = createRequestPool;\r\nmodule.exports.stream = stream;\r\nmodule.exports.execStoredProc = execStoredProc;\r\nmodule.exports.execStoredProcFromNode = execStoredProcFromNode;\r\nmodule.exports.execStoredProcNoJSONLocalResults = execStoredProcNoJSONLocalResults;\r\nmodule.exports.execStoredProcFromNodeNoPooler = execStoredProcFromNodeNoPooler;\r\n","var db = require('./db.js'),\r\n    TYPES = require('tedious').TYPES,\r\n    appConfig = require('./appConfig.js'),\r\n    uuidv4 = require('uuid/v4'),\r\n    crypto = require('crypto'),\r\n    base64 = require('base-64'),\r\n    logiraniKorisnici = [];\r\n\r\nexports.dbLogin = function (req, res) {\r\n    var currentTime = new Date().getTime();\r\n    var XsatiPrije = currentTime - (appConfig.logiranBezAktivnosti * 60 * 60 * 1000);\r\n    // prvo pocistimo array logirani korisnici od korisnika koji nisu nista radili vise od appConfig.logiranBezAktivnosti sati\r\n    var filterUserInKorisnici = logiraniKorisnici.filter(e => e.accessDateTime > XsatiPrije);\r\n    filterUserInKorisnici.forEach(f => logiraniKorisnici.splice(logiraniKorisnici.findIndex(e => e.accessDateTime === f.accessDateTime), 1));\r\n    // u filtriranim su sada samo korisnici sa aktivnostima u zadnjih appConfig.logiranBezAktivnosti sati\r\n    // postavimo sada samo aktivne korisnike u aktivni array\r\n    logiraniKorisnici = filterUserInKorisnici;\r\n    // call storedProc\r\n    var conn = db.createConnection();\r\n    var request = db.createRequest(\"Sigurnost.spApplicationUser_Login\", conn);\r\n    request.addParameter('userName', TYPES.NVarChar, req.body.korisnikIme);\r\n    request.addParameter('password', TYPES.NVarChar, req.body.korisnikPass);\r\n    // request.addParameter('password', TYPES.NVarChar, req.body.korisnikPass.length > 0 ? encrypt(req.body.korisnikPass) : null);\r\n    db.execStoredProcNoJSONLocalResults(request, conn, req, res, pushLoginToken)\r\n}\r\n\r\n// postavlja objekt u array of objects\r\nfunction pushLoginToken(resultData, req, res) {\r\n    var currentTime = new Date().getTime();\r\n    var isAdminDaNe = 0;\r\n    // ako je rezultat spApplicationUser_Login ok onda\r\n    // generira token (random string) i sprema ga\r\n    // u lokalni global array kao: username / token / vrijemelogiranja.\r\n    // ako nije vraá gresku prema klijentu\r\n    // struktura povratnih podataka:\r\n    // return objekt:{resultStatus: '', resultData: objekt (podaci ili error\r\n    if (resultData.resultStatus === '0') {\r\n        if (resultData.resultData[0].PkUsera > 0) {\r\n            if (resultData.resultData[0].AdminDaNe) {\r\n                if (resultData.resultData[0].AdminDaNe === true) {\r\n                    isAdminDaNe = 1\r\n                }\r\n            }\r\n            var loginToken = uuidv4();\r\n            logiraniKorisnici.push({ userName: req.body.korisnikIme, loginToken: loginToken, accessDateTime: currentTime });\r\n            const rezultat = {\r\n                loginStatus: 'OK',\r\n                loginToken: loginToken,\r\n                loginResult: 'OK',\r\n                loginFunction: isAdminDaNe,\r\n                ObaveznaIzmjenaLozinkeDaNe: resultData.resultData[0].ObaveznaIzmjenaLozinkeDaNe,\r\n                PkUsera: resultData.resultData[0].PkUsera\r\n            };\r\n            res.status(200)\r\n            res.send(rezultat);\r\n        } else {\r\n            res.status(403).send({ error: 'Login failed !' });\r\n        };\r\n    } else {\r\n        const rezultat = {\r\n            loginStatus: 'NOK',\r\n            loginToken: '',\r\n            loginResult: resultData.message + ' in  ' + resultData.procName + ': ' + resultData.lineNumber,\r\n            PkUsera: 0\r\n        }\r\n        res.status(500).send(rezultat);\r\n    };\r\n}\r\n\r\nexports.checkIfLoggedIn = function (korisnikToken) {\r\n    var existToken = logiraniKorisnici.filter(function (token) {\r\n        return toString(token.korisnikToken) === toString(korisnikToken)\r\n    });\r\n    if (existToken) {\r\n        if (existToken.length > 0) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nexports.userPassFromHeader = function (inputHeader) {\r\n    var korisnikToken = '';\r\n    if (inputHeader) {\r\n        if (inputHeader.length > 0) {\r\n            var korisnikToken = base64.decode(inputHeader); //kodirani podaci -- dekodiramo authdata\r\n        }\r\n    }\r\n    return korisnikToken\r\n};\r\n\r\n\r\n\r\n//---------Funkcije za kriptiranje i dekriptiranje  lozinke\r\nvar encrypt = exports.encrypt = function (text) {\r\n    // konfiguracijske varijable za kriptiranje \r\n    var algorithm = 'aes-256-cbc',\r\n        password = 'alfabetLama92';\r\n    let password_hash = crypto.createHash('md5').update(password, 'utf-8').digest('hex').toUpperCase();\r\n    let iv = new Buffer.alloc(16); // fill with zeros\r\n    var cipher = crypto.createCipheriv(algorithm, password_hash, iv),\r\n        crypted = cipher.update(text, 'utf8', 'hex');\r\n    crypted += cipher.final('hex');\r\n    return crypted;\r\n}\r\n\r\nfunction decrypt(text) {\r\n    // konfiguracijske varijable za kriptiranje \r\n    var algorithm = 'aes-256-cbc',\r\n        password = 'alfabetLama92';\r\n    let password_hash = crypto.createHash('md5').update(password, 'utf-8').digest('hex').toUpperCase();\r\n    let iv = new Buffer.alloc(16); // fill with zeros\r\n    var decipher = crypto.createDecipheriv(algorithm, password_hash, iv);\r\n    var dec = decipher.update(text, 'hex', 'utf8')\r\n    dec += decipher.final('utf8');\r\n    return dec;\r\n}","accentRemover = {};\r\n\r\nfunction removeDiacritics(str) {\r\n\r\n    var defaultDiacriticsRemovalMap = [{\r\n        'base': 'A',\r\n        'letters': /[\\u0041\\u24B6\\uFF21\\u00C0\\u00C1\\u00C2\\u1EA6\\u1EA4\\u1EAA\\u1EA8\\u00C3\\u0100\\u0102\\u1EB0\\u1EAE\\u1EB4\\u1EB2\\u0226\\u01E0\\u00C4\\u01DE\\u1EA2\\u00C5\\u01FA\\u01CD\\u0200\\u0202\\u1EA0\\u1EAC\\u1EB6\\u1E00\\u0104\\u023A\\u2C6F]/g\r\n    },\r\n    {\r\n        'base': 'AA',\r\n        'letters': /[\\uA732]/g\r\n    },\r\n    {\r\n        'base': 'AE',\r\n        'letters': /[\\u00C6\\u01FC\\u01E2]/g\r\n    },\r\n    {\r\n        'base': 'AO',\r\n        'letters': /[\\uA734]/g\r\n    },\r\n    {\r\n        'base': 'AU',\r\n        'letters': /[\\uA736]/g\r\n    },\r\n    {\r\n        'base': 'AV',\r\n        'letters': /[\\uA738\\uA73A]/g\r\n    },\r\n    {\r\n        'base': 'AY',\r\n        'letters': /[\\uA73C]/g\r\n    },\r\n    {\r\n        'base': 'B',\r\n        'letters': /[\\u0042\\u24B7\\uFF22\\u1E02\\u1E04\\u1E06\\u0243\\u0182\\u0181]/g\r\n    },\r\n    {\r\n        'base': 'C',\r\n        'letters': /[\\u0043\\u24B8\\uFF23\\u0106\\u0108\\u010A\\u010C\\u00C7\\u1E08\\u0187\\u023B\\uA73E]/g\r\n    },\r\n    {\r\n        'base': 'D',\r\n        'letters': /[\\u0044\\u24B9\\uFF24\\u1E0A\\u010E\\u1E0C\\u1E10\\u1E12\\u1E0E\\u0110\\u018B\\u018A\\u0189\\uA779]/g\r\n    },\r\n    {\r\n        'base': 'DZ',\r\n        'letters': /[\\u01F1\\u01C4]/g\r\n    },\r\n    {\r\n        'base': 'Dz',\r\n        'letters': /[\\u01F2\\u01C5]/g\r\n    },\r\n    {\r\n        'base': 'E',\r\n        'letters': /[\\u0045\\u24BA\\uFF25\\u00C8\\u00C9\\u00CA\\u1EC0\\u1EBE\\u1EC4\\u1EC2\\u1EBC\\u0112\\u1E14\\u1E16\\u0114\\u0116\\u00CB\\u1EBA\\u011A\\u0204\\u0206\\u1EB8\\u1EC6\\u0228\\u1E1C\\u0118\\u1E18\\u1E1A\\u0190\\u018E]/g\r\n    },\r\n    {\r\n        'base': 'F',\r\n        'letters': /[\\u0046\\u24BB\\uFF26\\u1E1E\\u0191\\uA77B]/g\r\n    },\r\n    {\r\n        'base': 'G',\r\n        'letters': /[\\u0047\\u24BC\\uFF27\\u01F4\\u011C\\u1E20\\u011E\\u0120\\u01E6\\u0122\\u01E4\\u0193\\uA7A0\\uA77D\\uA77E]/g\r\n    },\r\n    {\r\n        'base': 'H',\r\n        'letters': /[\\u0048\\u24BD\\uFF28\\u0124\\u1E22\\u1E26\\u021E\\u1E24\\u1E28\\u1E2A\\u0126\\u2C67\\u2C75\\uA78D]/g\r\n    },\r\n    {\r\n        'base': 'I',\r\n        'letters': /[\\u0049\\u24BE\\uFF29\\u00CC\\u00CD\\u00CE\\u0128\\u012A\\u012C\\u0130\\u00CF\\u1E2E\\u1EC8\\u01CF\\u0208\\u020A\\u1ECA\\u012E\\u1E2C\\u0197]/g\r\n    },\r\n    {\r\n        'base': 'J',\r\n        'letters': /[\\u004A\\u24BF\\uFF2A\\u0134\\u0248]/g\r\n    },\r\n    {\r\n        'base': 'K',\r\n        'letters': /[\\u004B\\u24C0\\uFF2B\\u1E30\\u01E8\\u1E32\\u0136\\u1E34\\u0198\\u2C69\\uA740\\uA742\\uA744\\uA7A2]/g\r\n    },\r\n    {\r\n        'base': 'L',\r\n        'letters': /[\\u004C\\u24C1\\uFF2C\\u013F\\u0139\\u013D\\u1E36\\u1E38\\u013B\\u1E3C\\u1E3A\\u0141\\u023D\\u2C62\\u2C60\\uA748\\uA746\\uA780]/g\r\n    },\r\n    {\r\n        'base': 'LJ',\r\n        'letters': /[\\u01C7]/g\r\n    },\r\n    {\r\n        'base': 'Lj',\r\n        'letters': /[\\u01C8]/g\r\n    },\r\n    {\r\n        'base': 'M',\r\n        'letters': /[\\u004D\\u24C2\\uFF2D\\u1E3E\\u1E40\\u1E42\\u2C6E\\u019C]/g\r\n    },\r\n    {\r\n        'base': 'N',\r\n        'letters': /[\\u004E\\u24C3\\uFF2E\\u01F8\\u0143\\u00D1\\u1E44\\u0147\\u1E46\\u0145\\u1E4A\\u1E48\\u0220\\u019D\\uA790\\uA7A4]/g\r\n    },\r\n    {\r\n        'base': 'NJ',\r\n        'letters': /[\\u01CA]/g\r\n    },\r\n    {\r\n        'base': 'Nj',\r\n        'letters': /[\\u01CB]/g\r\n    },\r\n    {\r\n        'base': 'O',\r\n        'letters': /[\\u004F\\u24C4\\uFF2F\\u00D2\\u00D3\\u00D4\\u1ED2\\u1ED0\\u1ED6\\u1ED4\\u00D5\\u1E4C\\u022C\\u1E4E\\u014C\\u1E50\\u1E52\\u014E\\u022E\\u0230\\u00D6\\u022A\\u1ECE\\u0150\\u01D1\\u020C\\u020E\\u01A0\\u1EDC\\u1EDA\\u1EE0\\u1EDE\\u1EE2\\u1ECC\\u1ED8\\u01EA\\u01EC\\u00D8\\u01FE\\u0186\\u019F\\uA74A\\uA74C]/g\r\n    },\r\n    {\r\n        'base': 'OI',\r\n        'letters': /[\\u01A2]/g\r\n    },\r\n    {\r\n        'base': 'OO',\r\n        'letters': /[\\uA74E]/g\r\n    },\r\n    {\r\n        'base': 'OU',\r\n        'letters': /[\\u0222]/g\r\n    },\r\n    {\r\n        'base': 'P',\r\n        'letters': /[\\u0050\\u24C5\\uFF30\\u1E54\\u1E56\\u01A4\\u2C63\\uA750\\uA752\\uA754]/g\r\n    },\r\n    {\r\n        'base': 'Q',\r\n        'letters': /[\\u0051\\u24C6\\uFF31\\uA756\\uA758\\u024A]/g\r\n    },\r\n    {\r\n        'base': 'R',\r\n        'letters': /[\\u0052\\u24C7\\uFF32\\u0154\\u1E58\\u0158\\u0210\\u0212\\u1E5A\\u1E5C\\u0156\\u1E5E\\u024C\\u2C64\\uA75A\\uA7A6\\uA782]/g\r\n    },\r\n    {\r\n        'base': 'S',\r\n        'letters': /[\\u0053\\u24C8\\uFF33\\u1E9E\\u015A\\u1E64\\u015C\\u1E60\\u0160\\u1E66\\u1E62\\u1E68\\u0218\\u015E\\u2C7E\\uA7A8\\uA784]/g\r\n    },\r\n    {\r\n        'base': 'T',\r\n        'letters': /[\\u0054\\u24C9\\uFF34\\u1E6A\\u0164\\u1E6C\\u021A\\u0162\\u1E70\\u1E6E\\u0166\\u01AC\\u01AE\\u023E\\uA786]/g\r\n    },\r\n    {\r\n        'base': 'TZ',\r\n        'letters': /[\\uA728]/g\r\n    },\r\n    {\r\n        'base': 'U',\r\n        'letters': /[\\u0055\\u24CA\\uFF35\\u00D9\\u00DA\\u00DB\\u0168\\u1E78\\u016A\\u1E7A\\u016C\\u00DC\\u01DB\\u01D7\\u01D5\\u01D9\\u1EE6\\u016E\\u0170\\u01D3\\u0214\\u0216\\u01AF\\u1EEA\\u1EE8\\u1EEE\\u1EEC\\u1EF0\\u1EE4\\u1E72\\u0172\\u1E76\\u1E74\\u0244]/g\r\n    },\r\n    {\r\n        'base': 'V',\r\n        'letters': /[\\u0056\\u24CB\\uFF36\\u1E7C\\u1E7E\\u01B2\\uA75E\\u0245]/g\r\n    },\r\n    {\r\n        'base': 'VY',\r\n        'letters': /[\\uA760]/g\r\n    },\r\n    {\r\n        'base': 'W',\r\n        'letters': /[\\u0057\\u24CC\\uFF37\\u1E80\\u1E82\\u0174\\u1E86\\u1E84\\u1E88\\u2C72]/g\r\n    },\r\n    {\r\n        'base': 'X',\r\n        'letters': /[\\u0058\\u24CD\\uFF38\\u1E8A\\u1E8C]/g\r\n    },\r\n    {\r\n        'base': 'Y',\r\n        'letters': /[\\u0059\\u24CE\\uFF39\\u1EF2\\u00DD\\u0176\\u1EF8\\u0232\\u1E8E\\u0178\\u1EF6\\u1EF4\\u01B3\\u024E\\u1EFE]/g\r\n    },\r\n    {\r\n        'base': 'Z',\r\n        'letters': /[\\u005A\\u24CF\\uFF3A\\u0179\\u1E90\\u017B\\u017D\\u1E92\\u1E94\\u01B5\\u0224\\u2C7F\\u2C6B\\uA762]/g\r\n    },\r\n    {\r\n        'base': 'a',\r\n        'letters': /[\\u0061\\u24D0\\uFF41\\u1E9A\\u00E0\\u00E1\\u00E2\\u1EA7\\u1EA5\\u1EAB\\u1EA9\\u00E3\\u0101\\u0103\\u1EB1\\u1EAF\\u1EB5\\u1EB3\\u0227\\u01E1\\u00E4\\u01DF\\u1EA3\\u00E5\\u01FB\\u01CE\\u0201\\u0203\\u1EA1\\u1EAD\\u1EB7\\u1E01\\u0105\\u2C65\\u0250]/g\r\n    },\r\n    {\r\n        'base': 'aa',\r\n        'letters': /[\\uA733]/g\r\n    },\r\n    {\r\n        'base': 'ae',\r\n        'letters': /[\\u00E6\\u01FD\\u01E3]/g\r\n    },\r\n    {\r\n        'base': 'ao',\r\n        'letters': /[\\uA735]/g\r\n    },\r\n    {\r\n        'base': 'au',\r\n        'letters': /[\\uA737]/g\r\n    },\r\n    {\r\n        'base': 'av',\r\n        'letters': /[\\uA739\\uA73B]/g\r\n    },\r\n    {\r\n        'base': 'ay',\r\n        'letters': /[\\uA73D]/g\r\n    },\r\n    {\r\n        'base': 'b',\r\n        'letters': /[\\u0062\\u24D1\\uFF42\\u1E03\\u1E05\\u1E07\\u0180\\u0183\\u0253]/g\r\n    },\r\n    {\r\n        'base': 'c',\r\n        'letters': /[\\u0063\\u24D2\\uFF43\\u0107\\u0109\\u010B\\u010D\\u00E7\\u1E09\\u0188\\u023C\\uA73F\\u2184]/g\r\n    },\r\n    {\r\n        'base': 'd',\r\n        'letters': /[\\u0064\\u24D3\\uFF44\\u1E0B\\u010F\\u1E0D\\u1E11\\u1E13\\u1E0F\\u0111\\u018C\\u0256\\u0257\\uA77A]/g\r\n    },\r\n    {\r\n        'base': 'dz',\r\n        'letters': /[\\u01F3\\u01C6]/g\r\n    },\r\n    {\r\n        'base': 'e',\r\n        'letters': /[\\u0065\\u24D4\\uFF45\\u00E8\\u00E9\\u00EA\\u1EC1\\u1EBF\\u1EC5\\u1EC3\\u1EBD\\u0113\\u1E15\\u1E17\\u0115\\u0117\\u00EB\\u1EBB\\u011B\\u0205\\u0207\\u1EB9\\u1EC7\\u0229\\u1E1D\\u0119\\u1E19\\u1E1B\\u0247\\u025B\\u01DD]/g\r\n    },\r\n    {\r\n        'base': 'f',\r\n        'letters': /[\\u0066\\u24D5\\uFF46\\u1E1F\\u0192\\uA77C]/g\r\n    },\r\n    {\r\n        'base': 'g',\r\n        'letters': /[\\u0067\\u24D6\\uFF47\\u01F5\\u011D\\u1E21\\u011F\\u0121\\u01E7\\u0123\\u01E5\\u0260\\uA7A1\\u1D79\\uA77F]/g\r\n    },\r\n    {\r\n        'base': 'h',\r\n        'letters': /[\\u0068\\u24D7\\uFF48\\u0125\\u1E23\\u1E27\\u021F\\u1E25\\u1E29\\u1E2B\\u1E96\\u0127\\u2C68\\u2C76\\u0265]/g\r\n    },\r\n    {\r\n        'base': 'hv',\r\n        'letters': /[\\u0195]/g\r\n    },\r\n    {\r\n        'base': 'i',\r\n        'letters': /[\\u0069\\u24D8\\uFF49\\u00EC\\u00ED\\u00EE\\u0129\\u012B\\u012D\\u00EF\\u1E2F\\u1EC9\\u01D0\\u0209\\u020B\\u1ECB\\u012F\\u1E2D\\u0268\\u0131]/g\r\n    },\r\n    {\r\n        'base': 'j',\r\n        'letters': /[\\u006A\\u24D9\\uFF4A\\u0135\\u01F0\\u0249]/g\r\n    },\r\n    {\r\n        'base': 'k',\r\n        'letters': /[\\u006B\\u24DA\\uFF4B\\u1E31\\u01E9\\u1E33\\u0137\\u1E35\\u0199\\u2C6A\\uA741\\uA743\\uA745\\uA7A3]/g\r\n    },\r\n    {\r\n        'base': 'l',\r\n        'letters': /[\\u006C\\u24DB\\uFF4C\\u0140\\u013A\\u013E\\u1E37\\u1E39\\u013C\\u1E3D\\u1E3B\\u017F\\u0142\\u019A\\u026B\\u2C61\\uA749\\uA781\\uA747]/g\r\n    },\r\n    {\r\n        'base': 'lj',\r\n        'letters': /[\\u01C9]/g\r\n    },\r\n    {\r\n        'base': 'm',\r\n        'letters': /[\\u006D\\u24DC\\uFF4D\\u1E3F\\u1E41\\u1E43\\u0271\\u026F]/g\r\n    },\r\n    {\r\n        'base': 'n',\r\n        'letters': /[\\u006E\\u24DD\\uFF4E\\u01F9\\u0144\\u00F1\\u1E45\\u0148\\u1E47\\u0146\\u1E4B\\u1E49\\u019E\\u0272\\u0149\\uA791\\uA7A5]/g\r\n    },\r\n    {\r\n        'base': 'nj',\r\n        'letters': /[\\u01CC]/g\r\n    },\r\n    {\r\n        'base': 'o',\r\n        'letters': /[\\u006F\\u24DE\\uFF4F\\u00F2\\u00F3\\u00F4\\u1ED3\\u1ED1\\u1ED7\\u1ED5\\u00F5\\u1E4D\\u022D\\u1E4F\\u014D\\u1E51\\u1E53\\u014F\\u022F\\u0231\\u00F6\\u022B\\u1ECF\\u0151\\u01D2\\u020D\\u020F\\u01A1\\u1EDD\\u1EDB\\u1EE1\\u1EDF\\u1EE3\\u1ECD\\u1ED9\\u01EB\\u01ED\\u00F8\\u01FF\\u0254\\uA74B\\uA74D\\u0275]/g\r\n    },\r\n    {\r\n        'base': 'oi',\r\n        'letters': /[\\u01A3]/g\r\n    },\r\n    {\r\n        'base': 'ou',\r\n        'letters': /[\\u0223]/g\r\n    },\r\n    {\r\n        'base': 'oo',\r\n        'letters': /[\\uA74F]/g\r\n    },\r\n    {\r\n        'base': 'p',\r\n        'letters': /[\\u0070\\u24DF\\uFF50\\u1E55\\u1E57\\u01A5\\u1D7D\\uA751\\uA753\\uA755]/g\r\n    },\r\n    {\r\n        'base': 'q',\r\n        'letters': /[\\u0071\\u24E0\\uFF51\\u024B\\uA757\\uA759]/g\r\n    },\r\n    {\r\n        'base': 'r',\r\n        'letters': /[\\u0072\\u24E1\\uFF52\\u0155\\u1E59\\u0159\\u0211\\u0213\\u1E5B\\u1E5D\\u0157\\u1E5F\\u024D\\u027D\\uA75B\\uA7A7\\uA783]/g\r\n    },\r\n    {\r\n        'base': 's',\r\n        'letters': /[\\u0073\\u24E2\\uFF53\\u00DF\\u015B\\u1E65\\u015D\\u1E61\\u0161\\u1E67\\u1E63\\u1E69\\u0219\\u015F\\u023F\\uA7A9\\uA785\\u1E9B]/g\r\n    },\r\n    {\r\n        'base': 't',\r\n        'letters': /[\\u0074\\u24E3\\uFF54\\u1E6B\\u1E97\\u0165\\u1E6D\\u021B\\u0163\\u1E71\\u1E6F\\u0167\\u01AD\\u0288\\u2C66\\uA787]/g\r\n    },\r\n    {\r\n        'base': 'tz',\r\n        'letters': /[\\uA729]/g\r\n    },\r\n    {\r\n        'base': 'u',\r\n        'letters': /[\\u0075\\u24E4\\uFF55\\u00F9\\u00FA\\u00FB\\u0169\\u1E79\\u016B\\u1E7B\\u016D\\u00FC\\u01DC\\u01D8\\u01D6\\u01DA\\u1EE7\\u016F\\u0171\\u01D4\\u0215\\u0217\\u01B0\\u1EEB\\u1EE9\\u1EEF\\u1EED\\u1EF1\\u1EE5\\u1E73\\u0173\\u1E77\\u1E75\\u0289]/g\r\n    },\r\n    {\r\n        'base': 'v',\r\n        'letters': /[\\u0076\\u24E5\\uFF56\\u1E7D\\u1E7F\\u028B\\uA75F\\u028C]/g\r\n    },\r\n    {\r\n        'base': 'vy',\r\n        'letters': /[\\uA761]/g\r\n    },\r\n    {\r\n        'base': 'w',\r\n        'letters': /[\\u0077\\u24E6\\uFF57\\u1E81\\u1E83\\u0175\\u1E87\\u1E85\\u1E98\\u1E89\\u2C73]/g\r\n    },\r\n    {\r\n        'base': 'x',\r\n        'letters': /[\\u0078\\u24E7\\uFF58\\u1E8B\\u1E8D]/g\r\n    },\r\n    {\r\n        'base': 'y',\r\n        'letters': /[\\u0079\\u24E8\\uFF59\\u1EF3\\u00FD\\u0177\\u1EF9\\u0233\\u1E8F\\u00FF\\u1EF7\\u1E99\\u1EF5\\u01B4\\u024F\\u1EFF]/g\r\n    },\r\n    {\r\n        'base': 'z',\r\n        'letters': /[\\u007A\\u24E9\\uFF5A\\u017A\\u1E91\\u017C\\u017E\\u1E93\\u1E95\\u01B6\\u0225\\u0240\\u2C6C\\uA763]/g\r\n    }\r\n    ];\r\n\r\n    for (var i = 0; i < defaultDiacriticsRemovalMap.length; i++) {\r\n        str = str.replace(defaultDiacriticsRemovalMap[i].letters, defaultDiacriticsRemovalMap[i].base);\r\n    }\r\n    return str;\r\n}\r\n\r\naccentRemover.removeAccents = function (inputString) {\r\n    var returnString = '';\r\n    returnString = removeDiacritics(inputString);\r\n    return returnString;\r\n}\r\n\r\nmodule.exports = accentRemover;","var db = require('./db.js'),\r\n    TYPES = require('tedious').TYPES,\r\n    fs = require('fs'),\r\n    fse = require('fs-extra'),\r\n    // logger = require('./logger.js'),\r\n    appConfig = require('./appConfig.js'),\r\n    res = '';\r\n\r\n\r\n\r\nfunction pripremiFoldere() {\r\n    // fs.exists(appConfig.backupPath, function (exists) {\r\n    //     if (exists) { } else {\r\n    //         fs.mkdir(appConfig.backupPath, function (err) {\r\n    //             if (err) {\r\n    //                 logger.log('error', 'tools.pripremiFoldere(): Error in  backupPath folder creation');\r\n    //             }\r\n    //         })\r\n    //     }\r\n    // });\r\n    fs.exists(appConfig.uploadPath, function (exists) {\r\n        if (exists) { } else {\r\n            fs.mkdir(appConfig.uploadPath, function (err) {\r\n                if (err) {\r\n                    // logger.log('error', 'tools.pripremiFoldere(): Error in uploadPath folder creation');\r\n                }\r\n            })\r\n        }\r\n    });\r\n    // fs.exists(appConfig.uploadPath + '/EditPDF', function (exists) {\r\n    //     if (exists) { } else {\r\n    //         fs.mkdir(appConfig.uploadPath + '/EditPDF', function (err) {\r\n    //             if (err) {\r\n    //                 logger.log('error', 'tools.pripremiFoldere(): Error in EditPDF folder creation');\r\n    //             }\r\n    //         })\r\n    //     }\r\n    // });\r\n    // fs.exists(appConfig.uploadPathTest, function (exists) {\r\n    //     if (exists) { } else {\r\n    //         fs.mkdir(appConfig.uploadPathTest, function (err) {\r\n    //             if (err) {\r\n    //                 logger.log('error', 'tools.pripremiFoldere(): Error in uploadPath folder creation');\r\n    //             }\r\n    //         })\r\n    //     }\r\n    // });\r\n    // fs.exists(appConfig.uploadPathTest + '/EditPDF', function (exists) {\r\n    //     if (exists) { } else {\r\n    //         fs.mkdir(appConfig.uploadPathTest + '/EditPDF', function (err) {\r\n    //             if (err) {\r\n    //                 logger.log('error', 'tools.pripremiFoldere(): Error in EditPDF folder creation');\r\n    //             }\r\n    //         })\r\n    //     }\r\n    // });\r\n    // fs.exists(appConfig.dirWatchPath, function (exists) {\r\n    //     if (exists) { } else {\r\n    //         fs.mkdir(appConfig.dirWatchPath, function (err) {\r\n    //             if (err) {\r\n    //                 logger.log('error', 'tools.pripremiFoldere(): Error in  dirWatchPath folder creation');\r\n    //             }\r\n    //         })\r\n    //     }\r\n    // });\r\n    // fs.exists(appConfig.dirRacuniWatchPath, function (exists) {\r\n    //     if (exists) { } else {\r\n    //         fs.mkdir(appConfig.dirRacuniWatchPath, function (err) {\r\n    //             if (err) {\r\n    //                 logger.log('error', 'tools.pripremiFoldere(): Error in  dirRacuniWatchPath folder creation');\r\n    //             }\r\n    //         })\r\n    //     }\r\n    // });\r\n    // fs.exists(appConfig.dirRacuniXMLuploadPath, function (exists) {\r\n    //     if (exists) { } else {\r\n    //         fs.mkdir(appConfig.dirRacuniXMLuploadPath, function (err) {\r\n    //             if (err) {\r\n    //                 logger.log('error', 'tools.pripremiFoldere(): Error in  dirRacuniXMLuploadPath folder creation');\r\n    //             }\r\n    //         })\r\n    //     }\r\n    // });\r\n    // fs.exists(appConfig.dirRacuniPDFuploadPath, function (exists) {\r\n    //     if (exists) { } else {\r\n    //         fs.mkdir(appConfig.dirRacuniPDFuploadPath, function (err) {\r\n    //             if (err) {\r\n    //                 logger.log('error', 'tools.pripremiFoldere(): Error in  dirRacuniPDFuploadPath folder creation');\r\n    //             }\r\n    //         })\r\n    //     }\r\n    // });\r\n    // fs.exists(appConfig.dir4XMLPantheon, function (exists) {\r\n    //     if (exists) { } else {\r\n    //         fs.mkdir(appConfig.dir4XMLPantheon, function (err) {\r\n    //             if (err) {\r\n    //                 logger.log('error', 'tools.pripremiFoldere(): Error in  dir4XMLPantheon folder creation');\r\n    //             }\r\n    //         })\r\n    //     }\r\n    // });\r\n    // fs.exists(appConfig.tempFilesPath, function (exists) {\r\n    //     if (exists) { } else {\r\n    //         fs.mkdir(appConfig.tempFilesPath, function (err) {\r\n    //             if (err) {\r\n    //                 logger.log('error', 'tools.pripremiFoldere(): Error in tempFilesPath folder creation');\r\n    //             }\r\n    //         })\r\n    //     }\r\n    // });\r\n    // fs.exists(appConfig.nodeSrv + 'logs', function (exists) {\r\n    //     if (exists) { } else {\r\n    //         fs.mkdir(appConfig.nodeSrv + 'logs', function (err) {\r\n    //             if (err) {\r\n    //                 logger.log('error', 'tools.pripremiFoldere(): Error in logs folder creation');\r\n    //             }\r\n    //         })\r\n    //     }\r\n    // });\r\n    // fs.exists(appConfig.dir4XMLPantheonTEMP, function (exists) {\r\n    //     if (exists) { } else {\r\n    //         fs.mkdir(appConfig.dir4XMLPantheonTEMP, function (err) {\r\n    //             if (err) {\r\n    //                 logger.log('error', 'tools.pripremiFoldere(): Error in dir4XMLPantheonTEMP folder creation');\r\n    //             }\r\n    //         })\r\n    //     }\r\n    // });\r\n\r\n}\r\n\r\n// function fileBackup() {\r\n//     //provjer postojanja putanje za backup, ako nema kreiramo je\r\n\r\n//     fs.exists(appConfig.backupPath, function (exists) {\r\n//         if (exists) { } else {\r\n//             fs.mkdir(appConfig.backupPath, function (err) {\r\n//                 if (err) {\r\n//                     logger.log('error', 'tools.fileBackup(): Error in  backupPath folder creation');\r\n//                 }\r\n//             })\r\n//         }\r\n//     });\r\n//     fs.exists(appConfig.uploadPath, function (exists) {\r\n//         if (exists) { } else {\r\n//             fs.mkdir(appConfig.uploadPath, function (err) {\r\n//                 if (err) {\r\n//                     logger.log('error', 'tools.fileBackup(): Error in uploadPath folder creation');\r\n//                 }\r\n//             })\r\n//         }\r\n//     });\r\n\r\n//     // kopiramo from uploadPath to backupPath\r\n//     fse.copy(appConfig.uploadPath, appConfig.backupPath, {\r\n//         overwrite: false,\r\n//         preserveTimestamps: true\r\n//     })\r\n//         .then(() => {\r\n//             logger.log('info', 'File backup success');\r\n//         })\r\n//         .catch(err => {\r\n//             logger.log('error', 'tools.fileBackup(): File backup failed');\r\n//         })\r\n// }\r\n\r\n// function databaseBackup() {\r\n//     function doBackup(conn) {\r\n//         var request = db.createRequest(\"Aplikacija.spDBbackup\", conn);\r\n//         db.execStoredProcFromNode(request, conn, res, function (spResult, outputParams, dbResultObj) {\r\n//             if (spResult === 'OK') {\r\n//                 logger.log('info', 'Database backup success');\r\n//             } else {\r\n//                 logger.log('error', 'tools.databaseBackup(): Database backup failed');\r\n//             }\r\n//         })\r\n//     }\r\n//     if (appConfig.database4Servisi === \"Test\") {\r\n//         db.pool4Test.acquire(function (err, conn) {\r\n//             doBackup(conn);\r\n//         });\r\n//     } else if (appConfig.database4Servisi === \"Production\") {\r\n//         db.pool.acquire(function (err, conn) {\r\n//             doBackup(conn);\r\n//         });\r\n//     }\r\n// }\r\n\r\n// function checkFileExists(filePath) {\r\n//     try {\r\n//         stats = fs.statSync(filePath);\r\n//         return true;\r\n//     } catch (e) {\r\n//         return false;\r\n//     }\r\n// }\r\n\r\n// function checkFolderExists(filePath) {\r\n//     try {\r\n//         stats = fs.statSync(filePath);\r\n//         return true;\r\n//     } catch (e) {\r\n//         return false;\r\n//     }\r\n// }\r\n\r\nfunction removeDiacritics(str) {\r\n    var defaultDiacriticsRemovalMap = [{\r\n        'base': 'A',\r\n        'letters': /[\\u0041\\u24B6\\uFF21\\u00C0\\u00C1\\u00C2\\u1EA6\\u1EA4\\u1EAA\\u1EA8\\u00C3\\u0100\\u0102\\u1EB0\\u1EAE\\u1EB4\\u1EB2\\u0226\\u01E0\\u00C4\\u01DE\\u1EA2\\u00C5\\u01FA\\u01CD\\u0200\\u0202\\u1EA0\\u1EAC\\u1EB6\\u1E00\\u0104\\u023A\\u2C6F]/g\r\n    },\r\n    {\r\n        'base': 'AA',\r\n        'letters': /[\\uA732]/g\r\n    },\r\n    {\r\n        'base': 'AE',\r\n        'letters': /[\\u00C6\\u01FC\\u01E2]/g\r\n    },\r\n    {\r\n        'base': 'AO',\r\n        'letters': /[\\uA734]/g\r\n    },\r\n    {\r\n        'base': 'AU',\r\n        'letters': /[\\uA736]/g\r\n    },\r\n    {\r\n        'base': 'AV',\r\n        'letters': /[\\uA738\\uA73A]/g\r\n    },\r\n    {\r\n        'base': 'AY',\r\n        'letters': /[\\uA73C]/g\r\n    },\r\n    {\r\n        'base': 'B',\r\n        'letters': /[\\u0042\\u24B7\\uFF22\\u1E02\\u1E04\\u1E06\\u0243\\u0182\\u0181]/g\r\n    },\r\n    {\r\n        'base': 'C',\r\n        'letters': /[\\u0043\\u24B8\\uFF23\\u0106\\u0108\\u010A\\u010C\\u00C7\\u1E08\\u0187\\u023B\\uA73E]/g\r\n    },\r\n    {\r\n        'base': 'D',\r\n        'letters': /[\\u0044\\u24B9\\uFF24\\u1E0A\\u010E\\u1E0C\\u1E10\\u1E12\\u1E0E\\u0110\\u018B\\u018A\\u0189\\uA779]/g\r\n    },\r\n    {\r\n        'base': 'DZ',\r\n        'letters': /[\\u01F1\\u01C4]/g\r\n    },\r\n    {\r\n        'base': 'Dz',\r\n        'letters': /[\\u01F2\\u01C5]/g\r\n    },\r\n    {\r\n        'base': 'E',\r\n        'letters': /[\\u0045\\u24BA\\uFF25\\u00C8\\u00C9\\u00CA\\u1EC0\\u1EBE\\u1EC4\\u1EC2\\u1EBC\\u0112\\u1E14\\u1E16\\u0114\\u0116\\u00CB\\u1EBA\\u011A\\u0204\\u0206\\u1EB8\\u1EC6\\u0228\\u1E1C\\u0118\\u1E18\\u1E1A\\u0190\\u018E]/g\r\n    },\r\n    {\r\n        'base': 'F',\r\n        'letters': /[\\u0046\\u24BB\\uFF26\\u1E1E\\u0191\\uA77B]/g\r\n    },\r\n    {\r\n        'base': 'G',\r\n        'letters': /[\\u0047\\u24BC\\uFF27\\u01F4\\u011C\\u1E20\\u011E\\u0120\\u01E6\\u0122\\u01E4\\u0193\\uA7A0\\uA77D\\uA77E]/g\r\n    },\r\n    {\r\n        'base': 'H',\r\n        'letters': /[\\u0048\\u24BD\\uFF28\\u0124\\u1E22\\u1E26\\u021E\\u1E24\\u1E28\\u1E2A\\u0126\\u2C67\\u2C75\\uA78D]/g\r\n    },\r\n    {\r\n        'base': 'I',\r\n        'letters': /[\\u0049\\u24BE\\uFF29\\u00CC\\u00CD\\u00CE\\u0128\\u012A\\u012C\\u0130\\u00CF\\u1E2E\\u1EC8\\u01CF\\u0208\\u020A\\u1ECA\\u012E\\u1E2C\\u0197]/g\r\n    },\r\n    {\r\n        'base': 'J',\r\n        'letters': /[\\u004A\\u24BF\\uFF2A\\u0134\\u0248]/g\r\n    },\r\n    {\r\n        'base': 'K',\r\n        'letters': /[\\u004B\\u24C0\\uFF2B\\u1E30\\u01E8\\u1E32\\u0136\\u1E34\\u0198\\u2C69\\uA740\\uA742\\uA744\\uA7A2]/g\r\n    },\r\n    {\r\n        'base': 'L',\r\n        'letters': /[\\u004C\\u24C1\\uFF2C\\u013F\\u0139\\u013D\\u1E36\\u1E38\\u013B\\u1E3C\\u1E3A\\u0141\\u023D\\u2C62\\u2C60\\uA748\\uA746\\uA780]/g\r\n    },\r\n    {\r\n        'base': 'LJ',\r\n        'letters': /[\\u01C7]/g\r\n    },\r\n    {\r\n        'base': 'Lj',\r\n        'letters': /[\\u01C8]/g\r\n    },\r\n    {\r\n        'base': 'M',\r\n        'letters': /[\\u004D\\u24C2\\uFF2D\\u1E3E\\u1E40\\u1E42\\u2C6E\\u019C]/g\r\n    },\r\n    {\r\n        'base': 'N',\r\n        'letters': /[\\u004E\\u24C3\\uFF2E\\u01F8\\u0143\\u00D1\\u1E44\\u0147\\u1E46\\u0145\\u1E4A\\u1E48\\u0220\\u019D\\uA790\\uA7A4]/g\r\n    },\r\n    {\r\n        'base': 'NJ',\r\n        'letters': /[\\u01CA]/g\r\n    },\r\n    {\r\n        'base': 'Nj',\r\n        'letters': /[\\u01CB]/g\r\n    },\r\n    {\r\n        'base': 'O',\r\n        'letters': /[\\u004F\\u24C4\\uFF2F\\u00D2\\u00D3\\u00D4\\u1ED2\\u1ED0\\u1ED6\\u1ED4\\u00D5\\u1E4C\\u022C\\u1E4E\\u014C\\u1E50\\u1E52\\u014E\\u022E\\u0230\\u00D6\\u022A\\u1ECE\\u0150\\u01D1\\u020C\\u020E\\u01A0\\u1EDC\\u1EDA\\u1EE0\\u1EDE\\u1EE2\\u1ECC\\u1ED8\\u01EA\\u01EC\\u00D8\\u01FE\\u0186\\u019F\\uA74A\\uA74C]/g\r\n    },\r\n    {\r\n        'base': 'OI',\r\n        'letters': /[\\u01A2]/g\r\n    },\r\n    {\r\n        'base': 'OO',\r\n        'letters': /[\\uA74E]/g\r\n    },\r\n    {\r\n        'base': 'OU',\r\n        'letters': /[\\u0222]/g\r\n    },\r\n    {\r\n        'base': 'P',\r\n        'letters': /[\\u0050\\u24C5\\uFF30\\u1E54\\u1E56\\u01A4\\u2C63\\uA750\\uA752\\uA754]/g\r\n    },\r\n    {\r\n        'base': 'Q',\r\n        'letters': /[\\u0051\\u24C6\\uFF31\\uA756\\uA758\\u024A]/g\r\n    },\r\n    {\r\n        'base': 'R',\r\n        'letters': /[\\u0052\\u24C7\\uFF32\\u0154\\u1E58\\u0158\\u0210\\u0212\\u1E5A\\u1E5C\\u0156\\u1E5E\\u024C\\u2C64\\uA75A\\uA7A6\\uA782]/g\r\n    },\r\n    {\r\n        'base': 'S',\r\n        'letters': /[\\u0053\\u24C8\\uFF33\\u1E9E\\u015A\\u1E64\\u015C\\u1E60\\u0160\\u1E66\\u1E62\\u1E68\\u0218\\u015E\\u2C7E\\uA7A8\\uA784]/g\r\n    },\r\n    {\r\n        'base': 'T',\r\n        'letters': /[\\u0054\\u24C9\\uFF34\\u1E6A\\u0164\\u1E6C\\u021A\\u0162\\u1E70\\u1E6E\\u0166\\u01AC\\u01AE\\u023E\\uA786]/g\r\n    },\r\n    {\r\n        'base': 'TZ',\r\n        'letters': /[\\uA728]/g\r\n    },\r\n    {\r\n        'base': 'U',\r\n        'letters': /[\\u0055\\u24CA\\uFF35\\u00D9\\u00DA\\u00DB\\u0168\\u1E78\\u016A\\u1E7A\\u016C\\u00DC\\u01DB\\u01D7\\u01D5\\u01D9\\u1EE6\\u016E\\u0170\\u01D3\\u0214\\u0216\\u01AF\\u1EEA\\u1EE8\\u1EEE\\u1EEC\\u1EF0\\u1EE4\\u1E72\\u0172\\u1E76\\u1E74\\u0244]/g\r\n    },\r\n    {\r\n        'base': 'V',\r\n        'letters': /[\\u0056\\u24CB\\uFF36\\u1E7C\\u1E7E\\u01B2\\uA75E\\u0245]/g\r\n    },\r\n    {\r\n        'base': 'VY',\r\n        'letters': /[\\uA760]/g\r\n    },\r\n    {\r\n        'base': 'W',\r\n        'letters': /[\\u0057\\u24CC\\uFF37\\u1E80\\u1E82\\u0174\\u1E86\\u1E84\\u1E88\\u2C72]/g\r\n    },\r\n    {\r\n        'base': 'X',\r\n        'letters': /[\\u0058\\u24CD\\uFF38\\u1E8A\\u1E8C]/g\r\n    },\r\n    {\r\n        'base': 'Y',\r\n        'letters': /[\\u0059\\u24CE\\uFF39\\u1EF2\\u00DD\\u0176\\u1EF8\\u0232\\u1E8E\\u0178\\u1EF6\\u1EF4\\u01B3\\u024E\\u1EFE]/g\r\n    },\r\n    {\r\n        'base': 'Z',\r\n        'letters': /[\\u005A\\u24CF\\uFF3A\\u0179\\u1E90\\u017B\\u017D\\u1E92\\u1E94\\u01B5\\u0224\\u2C7F\\u2C6B\\uA762]/g\r\n    },\r\n    {\r\n        'base': 'a',\r\n        'letters': /[\\u0061\\u24D0\\uFF41\\u1E9A\\u00E0\\u00E1\\u00E2\\u1EA7\\u1EA5\\u1EAB\\u1EA9\\u00E3\\u0101\\u0103\\u1EB1\\u1EAF\\u1EB5\\u1EB3\\u0227\\u01E1\\u00E4\\u01DF\\u1EA3\\u00E5\\u01FB\\u01CE\\u0201\\u0203\\u1EA1\\u1EAD\\u1EB7\\u1E01\\u0105\\u2C65\\u0250]/g\r\n    },\r\n    {\r\n        'base': 'aa',\r\n        'letters': /[\\uA733]/g\r\n    },\r\n    {\r\n        'base': 'ae',\r\n        'letters': /[\\u00E6\\u01FD\\u01E3]/g\r\n    },\r\n    {\r\n        'base': 'ao',\r\n        'letters': /[\\uA735]/g\r\n    },\r\n    {\r\n        'base': 'au',\r\n        'letters': /[\\uA737]/g\r\n    },\r\n    {\r\n        'base': 'av',\r\n        'letters': /[\\uA739\\uA73B]/g\r\n    },\r\n    {\r\n        'base': 'ay',\r\n        'letters': /[\\uA73D]/g\r\n    },\r\n    {\r\n        'base': 'b',\r\n        'letters': /[\\u0062\\u24D1\\uFF42\\u1E03\\u1E05\\u1E07\\u0180\\u0183\\u0253]/g\r\n    },\r\n    {\r\n        'base': 'c',\r\n        'letters': /[\\u0063\\u24D2\\uFF43\\u0107\\u0109\\u010B\\u010D\\u00E7\\u1E09\\u0188\\u023C\\uA73F\\u2184]/g\r\n    },\r\n    {\r\n        'base': 'd',\r\n        'letters': /[\\u0064\\u24D3\\uFF44\\u1E0B\\u010F\\u1E0D\\u1E11\\u1E13\\u1E0F\\u0111\\u018C\\u0256\\u0257\\uA77A]/g\r\n    },\r\n    {\r\n        'base': 'dz',\r\n        'letters': /[\\u01F3\\u01C6]/g\r\n    },\r\n    {\r\n        'base': 'e',\r\n        'letters': /[\\u0065\\u24D4\\uFF45\\u00E8\\u00E9\\u00EA\\u1EC1\\u1EBF\\u1EC5\\u1EC3\\u1EBD\\u0113\\u1E15\\u1E17\\u0115\\u0117\\u00EB\\u1EBB\\u011B\\u0205\\u0207\\u1EB9\\u1EC7\\u0229\\u1E1D\\u0119\\u1E19\\u1E1B\\u0247\\u025B\\u01DD]/g\r\n    },\r\n    {\r\n        'base': 'f',\r\n        'letters': /[\\u0066\\u24D5\\uFF46\\u1E1F\\u0192\\uA77C]/g\r\n    },\r\n    {\r\n        'base': 'g',\r\n        'letters': /[\\u0067\\u24D6\\uFF47\\u01F5\\u011D\\u1E21\\u011F\\u0121\\u01E7\\u0123\\u01E5\\u0260\\uA7A1\\u1D79\\uA77F]/g\r\n    },\r\n    {\r\n        'base': 'h',\r\n        'letters': /[\\u0068\\u24D7\\uFF48\\u0125\\u1E23\\u1E27\\u021F\\u1E25\\u1E29\\u1E2B\\u1E96\\u0127\\u2C68\\u2C76\\u0265]/g\r\n    },\r\n    {\r\n        'base': 'hv',\r\n        'letters': /[\\u0195]/g\r\n    },\r\n    {\r\n        'base': 'i',\r\n        'letters': /[\\u0069\\u24D8\\uFF49\\u00EC\\u00ED\\u00EE\\u0129\\u012B\\u012D\\u00EF\\u1E2F\\u1EC9\\u01D0\\u0209\\u020B\\u1ECB\\u012F\\u1E2D\\u0268\\u0131]/g\r\n    },\r\n    {\r\n        'base': 'j',\r\n        'letters': /[\\u006A\\u24D9\\uFF4A\\u0135\\u01F0\\u0249]/g\r\n    },\r\n    {\r\n        'base': 'k',\r\n        'letters': /[\\u006B\\u24DA\\uFF4B\\u1E31\\u01E9\\u1E33\\u0137\\u1E35\\u0199\\u2C6A\\uA741\\uA743\\uA745\\uA7A3]/g\r\n    },\r\n    {\r\n        'base': 'l',\r\n        'letters': /[\\u006C\\u24DB\\uFF4C\\u0140\\u013A\\u013E\\u1E37\\u1E39\\u013C\\u1E3D\\u1E3B\\u017F\\u0142\\u019A\\u026B\\u2C61\\uA749\\uA781\\uA747]/g\r\n    },\r\n    {\r\n        'base': 'lj',\r\n        'letters': /[\\u01C9]/g\r\n    },\r\n    {\r\n        'base': 'm',\r\n        'letters': /[\\u006D\\u24DC\\uFF4D\\u1E3F\\u1E41\\u1E43\\u0271\\u026F]/g\r\n    },\r\n    {\r\n        'base': 'n',\r\n        'letters': /[\\u006E\\u24DD\\uFF4E\\u01F9\\u0144\\u00F1\\u1E45\\u0148\\u1E47\\u0146\\u1E4B\\u1E49\\u019E\\u0272\\u0149\\uA791\\uA7A5]/g\r\n    },\r\n    {\r\n        'base': 'nj',\r\n        'letters': /[\\u01CC]/g\r\n    },\r\n    {\r\n        'base': 'o',\r\n        'letters': /[\\u006F\\u24DE\\uFF4F\\u00F2\\u00F3\\u00F4\\u1ED3\\u1ED1\\u1ED7\\u1ED5\\u00F5\\u1E4D\\u022D\\u1E4F\\u014D\\u1E51\\u1E53\\u014F\\u022F\\u0231\\u00F6\\u022B\\u1ECF\\u0151\\u01D2\\u020D\\u020F\\u01A1\\u1EDD\\u1EDB\\u1EE1\\u1EDF\\u1EE3\\u1ECD\\u1ED9\\u01EB\\u01ED\\u00F8\\u01FF\\u0254\\uA74B\\uA74D\\u0275]/g\r\n    },\r\n    {\r\n        'base': 'oi',\r\n        'letters': /[\\u01A3]/g\r\n    },\r\n    {\r\n        'base': 'ou',\r\n        'letters': /[\\u0223]/g\r\n    },\r\n    {\r\n        'base': 'oo',\r\n        'letters': /[\\uA74F]/g\r\n    },\r\n    {\r\n        'base': 'p',\r\n        'letters': /[\\u0070\\u24DF\\uFF50\\u1E55\\u1E57\\u01A5\\u1D7D\\uA751\\uA753\\uA755]/g\r\n    },\r\n    {\r\n        'base': 'q',\r\n        'letters': /[\\u0071\\u24E0\\uFF51\\u024B\\uA757\\uA759]/g\r\n    },\r\n    {\r\n        'base': 'r',\r\n        'letters': /[\\u0072\\u24E1\\uFF52\\u0155\\u1E59\\u0159\\u0211\\u0213\\u1E5B\\u1E5D\\u0157\\u1E5F\\u024D\\u027D\\uA75B\\uA7A7\\uA783]/g\r\n    },\r\n    {\r\n        'base': 's',\r\n        'letters': /[\\u0073\\u24E2\\uFF53\\u00DF\\u015B\\u1E65\\u015D\\u1E61\\u0161\\u1E67\\u1E63\\u1E69\\u0219\\u015F\\u023F\\uA7A9\\uA785\\u1E9B]/g\r\n    },\r\n    {\r\n        'base': 't',\r\n        'letters': /[\\u0074\\u24E3\\uFF54\\u1E6B\\u1E97\\u0165\\u1E6D\\u021B\\u0163\\u1E71\\u1E6F\\u0167\\u01AD\\u0288\\u2C66\\uA787]/g\r\n    },\r\n    {\r\n        'base': 'tz',\r\n        'letters': /[\\uA729]/g\r\n    },\r\n    {\r\n        'base': 'u',\r\n        'letters': /[\\u0075\\u24E4\\uFF55\\u00F9\\u00FA\\u00FB\\u0169\\u1E79\\u016B\\u1E7B\\u016D\\u00FC\\u01DC\\u01D8\\u01D6\\u01DA\\u1EE7\\u016F\\u0171\\u01D4\\u0215\\u0217\\u01B0\\u1EEB\\u1EE9\\u1EEF\\u1EED\\u1EF1\\u1EE5\\u1E73\\u0173\\u1E77\\u1E75\\u0289]/g\r\n    },\r\n    {\r\n        'base': 'v',\r\n        'letters': /[\\u0076\\u24E5\\uFF56\\u1E7D\\u1E7F\\u028B\\uA75F\\u028C]/g\r\n    },\r\n    {\r\n        'base': 'vy',\r\n        'letters': /[\\uA761]/g\r\n    },\r\n    {\r\n        'base': 'w',\r\n        'letters': /[\\u0077\\u24E6\\uFF57\\u1E81\\u1E83\\u0175\\u1E87\\u1E85\\u1E98\\u1E89\\u2C73]/g\r\n    },\r\n    {\r\n        'base': 'x',\r\n        'letters': /[\\u0078\\u24E7\\uFF58\\u1E8B\\u1E8D]/g\r\n    },\r\n    {\r\n        'base': 'y',\r\n        'letters': /[\\u0079\\u24E8\\uFF59\\u1EF3\\u00FD\\u0177\\u1EF9\\u0233\\u1E8F\\u00FF\\u1EF7\\u1E99\\u1EF5\\u01B4\\u024F\\u1EFF]/g\r\n    },\r\n    {\r\n        'base': 'z',\r\n        'letters': /[\\u007A\\u24E9\\uFF5A\\u017A\\u1E91\\u017C\\u017E\\u1E93\\u1E95\\u01B6\\u0225\\u0240\\u2C6C\\uA763]/g\r\n    }\r\n    ];\r\n\r\n    for (var i = 0; i < defaultDiacriticsRemovalMap.length; i++) {\r\n        str = str.replace(defaultDiacriticsRemovalMap[i].letters, defaultDiacriticsRemovalMap[i].base);\r\n    }\r\n    return str;\r\n}\r\n// promijeni sve karaktere koji ne smiju biti u filename-u\r\nfunction cleanUpFileName(str) {\r\n    var defaultCharactersRemovalMap = [{\r\n        'base': '_',\r\n        'letters': /[\\u003E\\uFE65\\uFF1E\\u003C\\uFE64\\uFF1C\\u003A\\u003F\\u002A\\u003D]/g\r\n        // >,<,?,*, =\r\n    }];\r\n\r\n    for (var i = 0; i < defaultCharactersRemovalMap.length; i++) {\r\n        str = str.replace(defaultCharactersRemovalMap[i].letters, defaultCharactersRemovalMap[i].base);\r\n    }\r\n    return str;\r\n}\r\n\r\n// module.exports.cleanUpFileName = cleanUpFileName;\r\n// module.exports.removeDiacritics = removeDiacritics;\r\n// module.exports.checkFolderExists = checkFolderExists;\r\n// module.exports.checkFileExists = checkFileExists;\r\n// module.exports.fileBackup = fileBackup;\r\n// module.exports.databaseBackup = databaseBackup;\r\nmodule.exports.pripremiFoldere = pripremiFoldere;","module.exports = require(\"base-64\");","module.exports = require(\"body-parser\");","module.exports = require(\"crypto\");","module.exports = require(\"express\");","module.exports = require(\"fs\");","module.exports = require(\"fs-extra\");","module.exports = require(\"moment\");","module.exports = require(\"multer\");","module.exports = require(\"request\");","module.exports = require(\"tedious\");","module.exports = require(\"tedious-connection-pool\");"],"sourceRoot":""}